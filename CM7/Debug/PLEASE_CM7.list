
PLEASE_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d98  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080050f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000049c0  20000014  0800510c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200049d4  0800510c  000249d4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021a95  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000363f  00000000  00000000  00041ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001420  00000000  00000000  00045118  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012d8  00000000  00000000  00046538  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039882  00000000  00000000  00047810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000117a5  00000000  00000000  00081092  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00183595  00000000  00000000  00092837  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00215dcc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005418  00000000  00000000  00215e48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005020 	.word	0x08005020

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	08005020 	.word	0x08005020

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <SystemInit+0x104>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <SystemInit+0x104>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b3b      	ldr	r3, [pc, #236]	; (80003e4 <SystemInit+0x104>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <SystemInit+0x104>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <SystemInit+0x108>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <SystemInit+0x108>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a34      	ldr	r2, [pc, #208]	; (80003e8 <SystemInit+0x108>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <SystemInit+0x10c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <SystemInit+0x10c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <SystemInit+0x10c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <SystemInit+0x10c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492e      	ldr	r1, [pc, #184]	; (80003ec <SystemInit+0x10c>)
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <SystemInit+0x110>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <SystemInit+0x108>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	2b07      	cmp	r3, #7
 8000344:	d907      	bls.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <SystemInit+0x108>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <SystemInit+0x108>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemInit+0x10c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <SystemInit+0x10c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <SystemInit+0x10c>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036a:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <SystemInit+0x114>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <SystemInit+0x10c>)
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <SystemInit+0x118>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <SystemInit+0x10c>)
 8000376:	4a21      	ldr	r2, [pc, #132]	; (80003fc <SystemInit+0x11c>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <SystemInit+0x10c>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <SystemInit+0x10c>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SystemInit+0x11c>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <SystemInit+0x10c>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <SystemInit+0x10c>)
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SystemInit+0x11c>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <SystemInit+0x10c>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <SystemInit+0x10c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <SystemInit+0x10c>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <SystemInit+0x10c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x120>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x120>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x124>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x128>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <SystemInit+0x12c>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <SystemInit+0x130>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SystemInit+0x104>)
 80003d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	52002000 	.word	0x52002000
 80003ec:	58024400 	.word	0x58024400
 80003f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003f4:	02020200 	.word	0x02020200
 80003f8:	01ff0000 	.word	0x01ff0000
 80003fc:	01010280 	.word	0x01010280
 8000400:	580000c0 	.word	0x580000c0
 8000404:	5c001000 	.word	0x5c001000
 8000408:	ffff0000 	.word	0xffff0000
 800040c:	51008108 	.word	0x51008108
 8000410:	52004000 	.word	0x52004000

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800041a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000420:	bf00      	nop
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <main+0xc8>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d004      	beq.n	8000438 <main+0x24>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf4      	bgt.n	8000422 <main+0xe>
  if ( timeout < 0 )
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	da01      	bge.n	8000442 <main+0x2e>
  {
  Error_Handler();
 800043e:	f000 f99b 	bl	8000778 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f000 fa67 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000446:	f000 f85d 	bl	8000504 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800044a:	4b24      	ldr	r3, [pc, #144]	; (80004dc <main+0xc8>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	4a22      	ldr	r2, [pc, #136]	; (80004dc <main+0xc8>)
 8000452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800045a:	4b20      	ldr	r3, [pc, #128]	; (80004dc <main+0xc8>)
 800045c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000464:	603b      	str	r3, [r7, #0]
 8000466:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fd7f 	bl	8000f6c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800046e:	2100      	movs	r1, #0
 8000470:	2000      	movs	r0, #0
 8000472:	f000 fd95 	bl	8000fa0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800047c:	bf00      	nop
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <main+0xc8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d104      	bne.n	8000494 <main+0x80>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	1e5a      	subs	r2, r3, #1
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	2b00      	cmp	r3, #0
 8000492:	dcf4      	bgt.n	800047e <main+0x6a>
if ( timeout < 0 )
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	da01      	bge.n	800049e <main+0x8a>
{
Error_Handler();
 800049a:	f000 f96d 	bl	8000778 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049e:	f000 f8ab 	bl	80005f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a2:	f002 f84b 	bl	800253c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <main+0xcc>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	480e      	ldr	r0, [pc, #56]	; (80004e4 <main+0xd0>)
 80004ac:	f002 f8b0 	bl	8002610 <osThreadNew>
 80004b0:	4602      	mov	r2, r0
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <main+0xd4>)
 80004b4:	601a      	str	r2, [r3, #0]

  /* creation of blinkYellow */
  blinkYellowHandle = osThreadNew(blinkYellowLED, NULL, &blinkYellow_attributes);
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <main+0xd8>)
 80004b8:	2100      	movs	r1, #0
 80004ba:	480d      	ldr	r0, [pc, #52]	; (80004f0 <main+0xdc>)
 80004bc:	f002 f8a8 	bl	8002610 <osThreadNew>
 80004c0:	4602      	mov	r2, r0
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <main+0xe0>)
 80004c4:	601a      	str	r2, [r3, #0]

  /* creation of blinkRed */
  blinkRedHandle = osThreadNew(blinkRedLED, NULL, &blinkRed_attributes);
 80004c6:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <main+0xe4>)
 80004c8:	2100      	movs	r1, #0
 80004ca:	480c      	ldr	r0, [pc, #48]	; (80004fc <main+0xe8>)
 80004cc:	f002 f8a0 	bl	8002610 <osThreadNew>
 80004d0:	4602      	mov	r2, r0
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <main+0xec>)
 80004d4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004d6:	f002 f865 	bl	80025a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004da:	e7fe      	b.n	80004da <main+0xc6>
 80004dc:	58024400 	.word	0x58024400
 80004e0:	08005084 	.word	0x08005084
 80004e4:	080006ed 	.word	0x080006ed
 80004e8:	20004938 	.word	0x20004938
 80004ec:	080050a8 	.word	0x080050a8
 80004f0:	080006fd 	.word	0x080006fd
 80004f4:	20004940 	.word	0x20004940
 80004f8:	080050cc 	.word	0x080050cc
 80004fc:	08000719 	.word	0x08000719
 8000500:	2000493c 	.word	0x2000493c

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b09c      	sub	sp, #112	; 0x70
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050e:	224c      	movs	r2, #76	; 0x4c
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f004 fd7b 	bl	800500e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2220      	movs	r2, #32
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f004 fd75 	bl	800500e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000524:	2004      	movs	r0, #4
 8000526:	f000 fd4f 	bl	8000fc8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <SystemClock_Config+0xec>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a2f      	ldr	r2, [pc, #188]	; (80005f0 <SystemClock_Config+0xec>)
 8000534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <SystemClock_Config+0xec>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <SystemClock_Config+0xf0>)
 8000546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000548:	4a2a      	ldr	r2, [pc, #168]	; (80005f4 <SystemClock_Config+0xf0>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <SystemClock_Config+0xf0>)
 8000552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800055c:	bf00      	nop
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <SystemClock_Config+0xec>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800056a:	d1f8      	bne.n	800055e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000570:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	2302      	movs	r3, #2
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000582:	2378      	movs	r3, #120	; 0x78
 8000584:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000586:	2302      	movs	r3, #2
 8000588:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800058a:	2302      	movs	r3, #2
 800058c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800058e:	2302      	movs	r3, #2
 8000590:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000592:	230c      	movs	r3, #12
 8000594:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000596:	2300      	movs	r3, #0
 8000598:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fd6a 	bl	800107c <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ae:	f000 f8e3 	bl	8000778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	233f      	movs	r3, #63	; 0x3f
 80005b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005be:	2308      	movs	r3, #8
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f95f 	bl	800189c <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80005e4:	f000 f8c8 	bl	8000778 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3770      	adds	r7, #112	; 0x70
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	58024800 	.word	0x58024800
 80005f4:	58000400 	.word	0x58000400

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <MX_GPIO_Init+0xe8>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000614:	4a32      	ldr	r2, [pc, #200]	; (80006e0 <MX_GPIO_Init+0xe8>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <MX_GPIO_Init+0xe8>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_GPIO_Init+0xe8>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000632:	4a2b      	ldr	r2, [pc, #172]	; (80006e0 <MX_GPIO_Init+0xe8>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0xe8>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_GPIO_Init+0xe8>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <MX_GPIO_Init+0xe8>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0xe8>)
 800065c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000660:	f003 0302 	and.w	r3, r3, #2
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_GPIO_Init+0xe8>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_GPIO_Init+0xe8>)
 8000670:	f043 0310 	orr.w	r3, r3, #16
 8000674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_GPIO_Init+0xe8>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068c:	4815      	ldr	r0, [pc, #84]	; (80006e4 <MX_GPIO_Init+0xec>)
 800068e:	f000 fc39 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2102      	movs	r1, #2
 8000696:	4814      	ldr	r0, [pc, #80]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000698:	f000 fc34 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800069c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_GPIO_Init+0xec>)
 80006b6:	f000 fa75 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ba:	2302      	movs	r3, #2
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_GPIO_Init+0xf0>)
 80006d2:	f000 fa67 	bl	8000ba4 <HAL_GPIO_Init>

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	58024400 	.word	0x58024400
 80006e4:	58020400 	.word	0x58020400
 80006e8:	58021000 	.word	0x58021000

080006ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f002 f831 	bl	800275c <osDelay>
 80006fa:	e7fb      	b.n	80006f4 <StartDefaultTask+0x8>

080006fc <blinkYellowLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkYellowLED */
void blinkYellowLED(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkYellowLED */
  /* Infinite loop */
  for(;;) {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000704:	2102      	movs	r1, #2
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <blinkYellowLED+0x18>)
 8000708:	f000 fc15 	bl	8000f36 <HAL_GPIO_TogglePin>
	  osDelay(250);
 800070c:	20fa      	movs	r0, #250	; 0xfa
 800070e:	f002 f825 	bl	800275c <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000712:	e7f7      	b.n	8000704 <blinkYellowLED+0x8>
 8000714:	58021000 	.word	0x58021000

08000718 <blinkRedLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkRedLED */
void blinkRedLED(void *argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkRedLED */
  /* Infinite loop */
  for(;;) {
	  int i = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <blinkRedLED+0x34>)
 800072a:	f000 fc04 	bl	8000f36 <HAL_GPIO_TogglePin>
	  for (i = 0; i < 999999; i++) {
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e002      	b.n	800073a <blinkRedLED+0x22>
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <blinkRedLED+0x38>)
 800073e:	4293      	cmp	r3, r2
 8000740:	ddf8      	ble.n	8000734 <blinkRedLED+0x1c>
		  //something expensive
	  }
	  osDelay(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f002 f809 	bl	800275c <osDelay>
  for(;;) {
 800074a:	e7e9      	b.n	8000720 <blinkRedLED+0x8>
 800074c:	58020400 	.word	0x58020400
 8000750:	000f423e 	.word	0x000f423e

08000754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000766:	f000 f911 	bl	800098c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40010000 	.word	0x40010000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077e:	e7fe      	b.n	800077e <Error_Handler+0x6>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x38>)
 8000788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_MspInit+0x38>)
 800078e:	f043 0302 	orr.w	r3, r3, #2
 8000792:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x38>)
 8000798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	210f      	movs	r1, #15
 80007a8:	f06f 0001 	mvn.w	r0, #1
 80007ac:	f000 f9d2 	bl	8000b54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58024400 	.word	0x58024400

080007bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d844      	bhi.n	8000854 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80007ca:	2200      	movs	r2, #0
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	2019      	movs	r0, #25
 80007d0:	f000 f9c0 	bl	8000b54 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007d4:	2019      	movs	r0, #25
 80007d6:	f000 f9d7 	bl	8000b88 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80007da:	4a24      	ldr	r2, [pc, #144]	; (800086c <HAL_InitTick+0xb0>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <HAL_InitTick+0xb4>)
 80007e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <HAL_InitTick+0xb4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <HAL_InitTick+0xb4>)
 80007f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007fe:	f107 020c 	add.w	r2, r7, #12
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fbb5 	bl	8001f78 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800080e:	f001 fb9d 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8000812:	4603      	mov	r3, r0
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <HAL_InitTick+0xb8>)
 800081c:	fba2 2303 	umull	r2, r3, r2, r3
 8000820:	0c9b      	lsrs	r3, r3, #18
 8000822:	3b01      	subs	r3, #1
 8000824:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_InitTick+0xbc>)
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_InitTick+0xc0>)
 800082a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_InitTick+0xbc>)
 800082e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <HAL_InitTick+0xbc>)
 8000836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000838:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_InitTick+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_InitTick+0xbc>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <HAL_InitTick+0xbc>)
 8000848:	f001 fbd8 	bl	8001ffc <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d107      	bne.n	8000862 <HAL_InitTick+0xa6>
 8000852:	e001      	b.n	8000858 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	e005      	b.n	8000864 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <HAL_InitTick+0xbc>)
 800085a:	f001 fc31 	bl	80020c0 <HAL_TIM_Base_Start_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3738      	adds	r7, #56	; 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000008 	.word	0x20000008
 8000870:	58024400 	.word	0x58024400
 8000874:	431bde83 	.word	0x431bde83
 8000878:	20004944 	.word	0x20004944
 800087c:	40010000 	.word	0x40010000

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <TIM1_UP_IRQHandler+0x10>)
 80008b2:	f001 fc3b 	bl	800212c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20004944 	.word	0x20004944

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008c4:	f7ff fd0c 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008ca:	e003      	b.n	80008d4 <LoopCopyDataInit>

080008cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80008ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008d2:	3104      	adds	r1, #4

080008d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008d4:	480a      	ldr	r0, [pc, #40]	; (8000900 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80008d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008dc:	d3f6      	bcc.n	80008cc <CopyDataInit>
  ldr  r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80008e0:	e002      	b.n	80008e8 <LoopFillZerobss>

080008e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008e4:	f842 3b04 	str.w	r3, [r2], #4

080008e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80008ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008ec:	d3f9      	bcc.n	80008e2 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f004 fb5f 	bl	8004fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fd8f 	bl	8000414 <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008fc:	080050f8 	.word	0x080050f8
  ldr  r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000904:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000908:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800090c:	200049d4 	.word	0x200049d4

08000910 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC3_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f90f 	bl	8000b3e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000920:	f001 f972 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8000924:	4601      	mov	r1, r0
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_Init+0x68>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <HAL_Init+0x6c>)
 8000932:	5cd3      	ldrb	r3, [r2, r3]
 8000934:	f003 031f 	and.w	r3, r3, #31
 8000938:	fa21 f303 	lsr.w	r3, r1, r3
 800093c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_Init+0x68>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_Init+0x6c>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	f003 031f 	and.w	r3, r3, #31
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <HAL_Init+0x70>)
 8000956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <HAL_Init+0x74>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ff2c 	bl	80007bc <HAL_InitTick>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e002      	b.n	8000974 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800096e:	f7ff ff07 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58024400 	.word	0x58024400
 8000980:	08005074 	.word	0x08005074
 8000984:	20000004 	.word	0x20000004
 8000988:	20000000 	.word	0x20000000

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	20004990 	.word	0x20004990

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20004990 	.word	0x20004990

080009cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_GetREVID+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	0c1b      	lsrs	r3, r3, #16
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	5c001000 	.word	0x5c001000

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <__NVIC_SetPriorityGrouping+0x40>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x40>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	05fa0000 	.word	0x05fa0000

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <__NVIC_EnableIRQ+0x38>)
 8000a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff4c 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b62:	f7ff ff63 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000b66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	6978      	ldr	r0, [r7, #20]
 8000b6e:	f7ff ffb3 	bl	8000ad8 <NVIC_EncodePriority>
 8000b72:	4602      	mov	r2, r0
 8000b74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff82 	bl	8000a84 <__NVIC_SetPriority>
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff56 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bb2:	4b89      	ldr	r3, [pc, #548]	; (8000dd8 <HAL_GPIO_Init+0x234>)
 8000bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bb6:	e194      	b.n	8000ee2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 8186 	beq.w	8000edc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d00b      	beq.n	8000bf0 <HAL_GPIO_Init+0x4c>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be4:	2b11      	cmp	r3, #17
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b12      	cmp	r3, #18
 8000bee:	d130      	bne.n	8000c52 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c26:	2201      	movs	r2, #1
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	f003 0201 	and.w	r2, r3, #1
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0xee>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b12      	cmp	r3, #18
 8000c90:	d123      	bne.n	8000cda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3208      	adds	r2, #8
 8000c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	220f      	movs	r2, #15
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	691a      	ldr	r2, [r3, #16]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	69b9      	ldr	r1, [r7, #24]
 8000cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0203 	and.w	r2, r3, #3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 80e0 	beq.w	8000edc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <HAL_GPIO_Init+0x238>)
 8000d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d22:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <HAL_GPIO_Init+0x238>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HAL_GPIO_Init+0x238>)
 8000d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3a:	4a29      	ldr	r2, [pc, #164]	; (8000de0 <HAL_GPIO_Init+0x23c>)
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <HAL_GPIO_Init+0x240>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d052      	beq.n	8000e0c <HAL_GPIO_Init+0x268>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <HAL_GPIO_Init+0x244>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d031      	beq.n	8000dd2 <HAL_GPIO_Init+0x22e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_GPIO_Init+0x248>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d02b      	beq.n	8000dce <HAL_GPIO_Init+0x22a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_GPIO_Init+0x24c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d025      	beq.n	8000dca <HAL_GPIO_Init+0x226>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <HAL_GPIO_Init+0x250>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d01f      	beq.n	8000dc6 <HAL_GPIO_Init+0x222>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <HAL_GPIO_Init+0x254>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x21e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <HAL_GPIO_Init+0x258>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x21a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <HAL_GPIO_Init+0x25c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x216>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_GPIO_Init+0x260>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x212>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_GPIO_Init+0x264>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x20e>
 8000dae:	2309      	movs	r3, #9
 8000db0:	e02d      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000db2:	230a      	movs	r3, #10
 8000db4:	e02b      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e029      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000dba:	2307      	movs	r3, #7
 8000dbc:	e027      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e025      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e023      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e021      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e01f      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e01d      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e01b      	b.n	8000e0e <HAL_GPIO_Init+0x26a>
 8000dd6:	bf00      	nop
 8000dd8:	58000080 	.word	0x58000080
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58000400 	.word	0x58000400
 8000de4:	58020000 	.word	0x58020000
 8000de8:	58020400 	.word	0x58020400
 8000dec:	58020800 	.word	0x58020800
 8000df0:	58020c00 	.word	0x58020c00
 8000df4:	58021000 	.word	0x58021000
 8000df8:	58021400 	.word	0x58021400
 8000dfc:	58021800 	.word	0x58021800
 8000e00:	58021c00 	.word	0x58021c00
 8000e04:	58022000 	.word	0x58022000
 8000e08:	58022400 	.word	0x58022400
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4093      	lsls	r3, r2
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e1e:	4938      	ldr	r1, [pc, #224]	; (8000f00 <HAL_GPIO_Init+0x35c>)
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f47f ae63 	bne.w	8000bb8 <HAL_GPIO_Init+0x14>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	58000400 	.word	0x58000400

08000f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	4613      	mov	r3, r2
 8000f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	041a      	lsls	r2, r3, #16
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	619a      	str	r2, [r3, #24]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695a      	ldr	r2, [r3, #20]
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	401a      	ands	r2, r3
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d104      	bne.n	8000f5a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	041a      	lsls	r2, r3, #16
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_HSEM_FastTake+0x2c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3320      	adds	r3, #32
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_HSEM_FastTake+0x30>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e000      	b.n	8000f8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	58026400 	.word	0x58026400
 8000f9c:	80000300 	.word	0x80000300

08000fa0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000faa:	4906      	ldr	r1, [pc, #24]	; (8000fc4 <HAL_HSEM_Release+0x24>)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	58026400 	.word	0x58026400

08000fc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	d00a      	beq.n	8000ff2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d001      	beq.n	8000fee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e040      	b.n	8001070 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e03e      	b.n	8001070 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000ffa:	491f      	ldr	r1, [pc, #124]	; (8001078 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001002:	f7ff fcd7 	bl	80009b4 <HAL_GetTick>
 8001006:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001008:	e009      	b.n	800101e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800100a:	f7ff fcd3 	bl	80009b4 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001018:	d901      	bls.n	800101e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e028      	b.n	8001070 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_PWREx_ConfigSupply+0xb0>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800102a:	d1ee      	bne.n	800100a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b1e      	cmp	r3, #30
 8001030:	d008      	beq.n	8001044 <HAL_PWREx_ConfigSupply+0x7c>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b2e      	cmp	r3, #46	; 0x2e
 8001036:	d005      	beq.n	8001044 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b1d      	cmp	r3, #29
 800103c:	d002      	beq.n	8001044 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b2d      	cmp	r3, #45	; 0x2d
 8001042:	d114      	bne.n	800106e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001044:	f7ff fcb6 	bl	80009b4 <HAL_GetTick>
 8001048:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800104a:	e009      	b.n	8001060 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800104c:	f7ff fcb2 	bl	80009b4 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105a:	d901      	bls.n	8001060 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e007      	b.n	8001070 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_PWREx_ConfigSupply+0xb0>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d1ee      	bne.n	800104c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024800 	.word	0x58024800

0800107c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e3ff      	b.n	800188e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8087 	beq.w	80011aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800109c:	4b99      	ldr	r3, [pc, #612]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010a6:	4b97      	ldr	r3, [pc, #604]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	2b10      	cmp	r3, #16
 80010b0:	d007      	beq.n	80010c2 <HAL_RCC_OscConfig+0x46>
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	2b18      	cmp	r3, #24
 80010b6:	d110      	bne.n	80010da <HAL_RCC_OscConfig+0x5e>
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d10b      	bne.n	80010da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c2:	4b90      	ldr	r3, [pc, #576]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d06c      	beq.n	80011a8 <HAL_RCC_OscConfig+0x12c>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d168      	bne.n	80011a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e3d9      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x76>
 80010e4:	4b87      	ldr	r3, [pc, #540]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a86      	ldr	r2, [pc, #536]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e02e      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x98>
 80010fa:	4b82      	ldr	r3, [pc, #520]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a81      	ldr	r2, [pc, #516]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b7f      	ldr	r3, [pc, #508]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a7e      	ldr	r2, [pc, #504]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800110c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e01d      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0xbc>
 800111e:	4b79      	ldr	r3, [pc, #484]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a78      	ldr	r2, [pc, #480]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b76      	ldr	r3, [pc, #472]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a75      	ldr	r2, [pc, #468]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 8001138:	4b72      	ldr	r3, [pc, #456]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a71      	ldr	r2, [pc, #452]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a6e      	ldr	r2, [pc, #440]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fc2c 	bl	80009b4 <HAL_GetTick>
 800115c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fc28 	bl	80009b4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e38d      	b.n	800188e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001172:	4b64      	ldr	r3, [pc, #400]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0xe4>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001180:	f7ff fc18 	bl	80009b4 <HAL_GetTick>
 8001184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fc14 	bl	80009b4 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e379      	b.n	800188e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800119a:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x10c>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 80ae 	beq.w	8001314 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b8:	4b52      	ldr	r3, [pc, #328]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_RCC_OscConfig+0x162>
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	2b18      	cmp	r3, #24
 80011d2:	d13a      	bne.n	800124a <HAL_RCC_OscConfig+0x1ce>
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d135      	bne.n	800124a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011de:	4b49      	ldr	r3, [pc, #292]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x17a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e34b      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	f7ff fbe9 	bl	80009cc <HAL_GetREVID>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8001200:	429a      	cmp	r2, r3
 8001202:	d817      	bhi.n	8001234 <HAL_RCC_OscConfig+0x1b8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	2b40      	cmp	r3, #64	; 0x40
 800120a:	d108      	bne.n	800121e <HAL_RCC_OscConfig+0x1a2>
 800120c:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001214:	4a3b      	ldr	r2, [pc, #236]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800121c:	e07a      	b.n	8001314 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	031b      	lsls	r3, r3, #12
 800122c:	4935      	ldr	r1, [pc, #212]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001232:	e06f      	b.n	8001314 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b33      	ldr	r3, [pc, #204]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	061b      	lsls	r3, r3, #24
 8001242:	4930      	ldr	r1, [pc, #192]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001248:	e064      	b.n	8001314 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d045      	beq.n	80012de <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 0219 	bic.w	r2, r3, #25
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	4929      	ldr	r1, [pc, #164]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fba6 	bl	80009b4 <HAL_GetTick>
 8001268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fba2 	bl	80009b4 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e307      	b.n	800188e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	f7ff fb9f 	bl	80009cc <HAL_GetREVID>
 800128e:	4602      	mov	r2, r0
 8001290:	f241 0303 	movw	r3, #4099	; 0x1003
 8001294:	429a      	cmp	r2, r3
 8001296:	d817      	bhi.n	80012c8 <HAL_RCC_OscConfig+0x24c>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b40      	cmp	r3, #64	; 0x40
 800129e:	d108      	bne.n	80012b2 <HAL_RCC_OscConfig+0x236>
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ae:	6053      	str	r3, [r2, #4]
 80012b0:	e030      	b.n	8001314 <HAL_RCC_OscConfig+0x298>
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	031b      	lsls	r3, r3, #12
 80012c0:	4910      	ldr	r1, [pc, #64]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
 80012c6:	e025      	b.n	8001314 <HAL_RCC_OscConfig+0x298>
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	061b      	lsls	r3, r3, #24
 80012d6:	490b      	ldr	r1, [pc, #44]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	e01a      	b.n	8001314 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb63 	bl	80009b4 <HAL_GetTick>
 80012ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fb5f 	bl	80009b4 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d903      	bls.n	8001308 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e2c4      	b.n	800188e <HAL_RCC_OscConfig+0x812>
 8001304:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001308:	4ba4      	ldr	r3, [pc, #656]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1ee      	bne.n	80012f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80a9 	beq.w	8001474 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001322:	4b9e      	ldr	r3, [pc, #632]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800132a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800132c:	4b9b      	ldr	r3, [pc, #620]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b08      	cmp	r3, #8
 8001336:	d007      	beq.n	8001348 <HAL_RCC_OscConfig+0x2cc>
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b18      	cmp	r3, #24
 800133c:	d13a      	bne.n	80013b4 <HAL_RCC_OscConfig+0x338>
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d135      	bne.n	80013b4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001348:	4b94      	ldr	r3, [pc, #592]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x2e4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	2b80      	cmp	r3, #128	; 0x80
 800135a:	d001      	beq.n	8001360 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e296      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001360:	f7ff fb34 	bl	80009cc <HAL_GetREVID>
 8001364:	4602      	mov	r2, r0
 8001366:	f241 0303 	movw	r3, #4099	; 0x1003
 800136a:	429a      	cmp	r2, r3
 800136c:	d817      	bhi.n	800139e <HAL_RCC_OscConfig+0x322>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	2b20      	cmp	r3, #32
 8001374:	d108      	bne.n	8001388 <HAL_RCC_OscConfig+0x30c>
 8001376:	4b89      	ldr	r3, [pc, #548]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800137e:	4a87      	ldr	r2, [pc, #540]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001384:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001386:	e075      	b.n	8001474 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001388:	4b84      	ldr	r3, [pc, #528]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	069b      	lsls	r3, r3, #26
 8001396:	4981      	ldr	r1, [pc, #516]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800139c:	e06a      	b.n	8001474 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800139e:	4b7f      	ldr	r3, [pc, #508]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	061b      	lsls	r3, r3, #24
 80013ac:	497b      	ldr	r1, [pc, #492]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013b2:	e05f      	b.n	8001474 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d042      	beq.n	8001442 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013bc:	4b77      	ldr	r3, [pc, #476]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a76      	ldr	r2, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80013c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff faf4 	bl	80009b4 <HAL_GetTick>
 80013cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013d0:	f7ff faf0 	bl	80009b4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e255      	b.n	800188e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ee:	f7ff faed 	bl	80009cc <HAL_GetREVID>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d817      	bhi.n	800142c <HAL_RCC_OscConfig+0x3b0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	2b20      	cmp	r3, #32
 8001402:	d108      	bne.n	8001416 <HAL_RCC_OscConfig+0x39a>
 8001404:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800140c:	4a63      	ldr	r2, [pc, #396]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800140e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001412:	6053      	str	r3, [r2, #4]
 8001414:	e02e      	b.n	8001474 <HAL_RCC_OscConfig+0x3f8>
 8001416:	4b61      	ldr	r3, [pc, #388]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	069b      	lsls	r3, r3, #26
 8001424:	495d      	ldr	r1, [pc, #372]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
 800142a:	e023      	b.n	8001474 <HAL_RCC_OscConfig+0x3f8>
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	4958      	ldr	r1, [pc, #352]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800143c:	4313      	orrs	r3, r2
 800143e:	60cb      	str	r3, [r1, #12]
 8001440:	e018      	b.n	8001474 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a55      	ldr	r2, [pc, #340]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800144c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff fab1 	bl	80009b4 <HAL_GetTick>
 8001452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001456:	f7ff faad 	bl	80009b4 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e212      	b.n	800188e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001468:	4b4c      	ldr	r3, [pc, #304]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d036      	beq.n	80014ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d019      	beq.n	80014bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	4a43      	ldr	r2, [pc, #268]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff fa8e 	bl	80009b4 <HAL_GetTick>
 8001498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff fa8a 	bl	80009b4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1ef      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80014b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x420>
 80014ba:	e018      	b.n	80014ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80014be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c0:	4a36      	ldr	r2, [pc, #216]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fa74 	bl	80009b4 <HAL_GetTick>
 80014cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fa70 	bl	80009b4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1d5      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <HAL_RCC_OscConfig+0x520>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d036      	beq.n	8001568 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d019      	beq.n	8001536 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a25      	ldr	r2, [pc, #148]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800150c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800150e:	f7ff fa51 	bl	80009b4 <HAL_GetTick>
 8001512:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001516:	f7ff fa4d 	bl	80009b4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1b2      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x49a>
 8001534:	e018      	b.n	8001568 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_RCC_OscConfig+0x520>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800153c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001540:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001542:	f7ff fa37 	bl	80009b4 <HAL_GetTick>
 8001546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800154a:	f7ff fa33 	bl	80009b4 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e198      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_RCC_OscConfig+0x520>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8085 	beq.w	8001680 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_RCC_OscConfig+0x524>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_RCC_OscConfig+0x524>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001582:	f7ff fa17 	bl	80009b4 <HAL_GetTick>
 8001586:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001588:	e00c      	b.n	80015a4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff fa13 	bl	80009b4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	; 0x64
 8001596:	d905      	bls.n	80015a4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e178      	b.n	800188e <HAL_RCC_OscConfig+0x812>
 800159c:	58024400 	.word	0x58024400
 80015a0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015a4:	4b96      	ldr	r3, [pc, #600]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ec      	beq.n	800158a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x54a>
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a91      	ldr	r2, [pc, #580]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	e02d      	b.n	8001622 <HAL_RCC_OscConfig+0x5a6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x56c>
 80015ce:	4b8d      	ldr	r3, [pc, #564]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a8c      	ldr	r2, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	4b8a      	ldr	r3, [pc, #552]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a89      	ldr	r2, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
 80015e6:	e01c      	b.n	8001622 <HAL_RCC_OscConfig+0x5a6>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b05      	cmp	r3, #5
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x58e>
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a83      	ldr	r2, [pc, #524]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
 80015fc:	4b81      	ldr	r3, [pc, #516]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a80      	ldr	r2, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	e00b      	b.n	8001622 <HAL_RCC_OscConfig+0x5a6>
 800160a:	4b7e      	ldr	r3, [pc, #504]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a7d      	ldr	r2, [pc, #500]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	4a7a      	ldr	r2, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800161c:	f023 0304 	bic.w	r3, r3, #4
 8001620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d015      	beq.n	8001656 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff f9c3 	bl	80009b4 <HAL_GetTick>
 800162e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff f9bf 	bl	80009b4 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e122      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001648:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ee      	beq.n	8001632 <HAL_RCC_OscConfig+0x5b6>
 8001654:	e014      	b.n	8001680 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff f9ad 	bl	80009b4 <HAL_GetTick>
 800165a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff f9a9 	bl	80009b4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e10c      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001674:	4b63      	ldr	r3, [pc, #396]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ee      	bne.n	800165e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8101 	beq.w	800188c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800168a:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001692:	2b18      	cmp	r3, #24
 8001694:	f000 80bc 	beq.w	8001810 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	2b02      	cmp	r3, #2
 800169e:	f040 8095 	bne.w	80017cc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b58      	ldr	r3, [pc, #352]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a57      	ldr	r2, [pc, #348]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff f981 	bl	80009b4 <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff f97d 	bl	80009b4 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0e2      	b.n	800188e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d4:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80016d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_RCC_OscConfig+0x78c>)
 80016da:	4013      	ands	r3, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	430a      	orrs	r2, r1
 80016e8:	4946      	ldr	r1, [pc, #280]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	628b      	str	r3, [r1, #40]	; 0x28
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	3b01      	subs	r3, #1
 80016fe:	025b      	lsls	r3, r3, #9
 8001700:	b29b      	uxth	r3, r3
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
 800170c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001716:	3b01      	subs	r3, #1
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800171e:	4939      	ldr	r1, [pc, #228]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001720:	4313      	orrs	r3, r2
 8001722:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	4a36      	ldr	r2, [pc, #216]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_RCC_OscConfig+0x790>)
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800173c:	00d2      	lsls	r2, r2, #3
 800173e:	4931      	ldr	r1, [pc, #196]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001740:	4313      	orrs	r3, r2
 8001742:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f023 020c 	bic.w	r2, r3, #12
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	492c      	ldr	r1, [pc, #176]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001752:	4313      	orrs	r3, r2
 8001754:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001756:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	f023 0202 	bic.w	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4928      	ldr	r1, [pc, #160]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001764:	4313      	orrs	r3, r2
 8001766:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	4a25      	ldr	r2, [pc, #148]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	4a22      	ldr	r2, [pc, #136]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f906 	bl	80009b4 <HAL_GetTick>
 80017a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f902 	bl	80009b4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e067      	b.n	800188e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x730>
 80017ca:	e05f      	b.n	800188c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80017d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff f8ec 	bl	80009b4 <HAL_GetTick>
 80017dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff f8e8 	bl	80009b4 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e04d      	b.n	800188e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x764>
 80017fe:	e045      	b.n	800188c <HAL_RCC_OscConfig+0x810>
 8001800:	58024800 	.word	0x58024800
 8001804:	58024400 	.word	0x58024400
 8001808:	fffffc0c 	.word	0xfffffc0c
 800180c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x81c>)
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_OscConfig+0x81c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2b01      	cmp	r3, #1
 8001822:	d031      	beq.n	8001888 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f003 0203 	and.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d12a      	bne.n	8001888 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d122      	bne.n	8001888 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d11a      	bne.n	8001888 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	0a5b      	lsrs	r3, r3, #9
 8001856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d111      	bne.n	8001888 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d108      	bne.n	8001888 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	0e1b      	lsrs	r3, r3, #24
 800187a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3730      	adds	r7, #48	; 0x30
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	58024400 	.word	0x58024400

0800189c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e19c      	b.n	8001bea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b8a      	ldr	r3, [pc, #552]	; (8001adc <HAL_RCC_ClockConfig+0x240>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d910      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b87      	ldr	r3, [pc, #540]	; (8001adc <HAL_RCC_ClockConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 020f 	bic.w	r2, r3, #15
 80018c6:	4985      	ldr	r1, [pc, #532]	; (8001adc <HAL_RCC_ClockConfig+0x240>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b83      	ldr	r3, [pc, #524]	; (8001adc <HAL_RCC_ClockConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e184      	b.n	8001bea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d010      	beq.n	800190e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	4b7b      	ldr	r3, [pc, #492]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d908      	bls.n	800190e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018fc:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4975      	ldr	r1, [pc, #468]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 800190a:	4313      	orrs	r3, r2
 800190c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d010      	beq.n	800193c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001926:	429a      	cmp	r2, r3
 8001928:	d908      	bls.n	800193c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800192a:	4b6d      	ldr	r3, [pc, #436]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	496a      	ldr	r1, [pc, #424]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001938:	4313      	orrs	r3, r2
 800193a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d010      	beq.n	800196a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	4b64      	ldr	r3, [pc, #400]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001954:	429a      	cmp	r2, r3
 8001956:	d908      	bls.n	800196a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001958:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	495e      	ldr	r1, [pc, #376]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001966:	4313      	orrs	r3, r2
 8001968:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d010      	beq.n	8001998 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001982:	429a      	cmp	r2, r3
 8001984:	d908      	bls.n	8001998 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4953      	ldr	r1, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001994:	4313      	orrs	r3, r2
 8001996:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d010      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d908      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f023 020f 	bic.w	r2, r3, #15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4947      	ldr	r1, [pc, #284]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d055      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019d2:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4940      	ldr	r1, [pc, #256]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d121      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0f6      	b.n	8001bea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d115      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0ea      	b.n	8001bea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0de      	b.n	8001bea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0d6      	b.n	8001bea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	f023 0207 	bic.w	r2, r3, #7
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4925      	ldr	r1, [pc, #148]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7fe ffb1 	bl	80009b4 <HAL_GetTick>
 8001a52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a56:	f7fe ffad 	bl	80009b4 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0be      	b.n	8001bea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d1eb      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d010      	beq.n	8001aac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d208      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_RCC_ClockConfig+0x244>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d214      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_RCC_ClockConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 020f 	bic.w	r2, r3, #15
 8001ac2:	4906      	ldr	r1, [pc, #24]	; (8001adc <HAL_RCC_ClockConfig+0x240>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_RCC_ClockConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e086      	b.n	8001bea <HAL_RCC_ClockConfig+0x34e>
 8001adc:	52002000 	.word	0x52002000
 8001ae0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d208      	bcs.n	8001b12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b00:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4939      	ldr	r1, [pc, #228]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d010      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d208      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b2e:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	492e      	ldr	r1, [pc, #184]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d208      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4922      	ldr	r1, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d010      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d208      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4917      	ldr	r1, [pc, #92]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b9c:	f000 f834 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x35c>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	fa21 f303 	lsr.w	r3, r1, r3
 8001bb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_RCC_ClockConfig+0x358>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_RCC_ClockConfig+0x35c>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x360>)
 8001bd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_RCC_ClockConfig+0x364>)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_RCC_ClockConfig+0x368>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fdec 	bl	80007bc <HAL_InitTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	08005074 	.word	0x08005074
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c0e:	4baf      	ldr	r3, [pc, #700]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c16:	2b18      	cmp	r3, #24
 8001c18:	f200 814e 	bhi.w	8001eb8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c89 	.word	0x08001c89
 8001c28:	08001eb9 	.word	0x08001eb9
 8001c2c:	08001eb9 	.word	0x08001eb9
 8001c30:	08001eb9 	.word	0x08001eb9
 8001c34:	08001eb9 	.word	0x08001eb9
 8001c38:	08001eb9 	.word	0x08001eb9
 8001c3c:	08001eb9 	.word	0x08001eb9
 8001c40:	08001eb9 	.word	0x08001eb9
 8001c44:	08001caf 	.word	0x08001caf
 8001c48:	08001eb9 	.word	0x08001eb9
 8001c4c:	08001eb9 	.word	0x08001eb9
 8001c50:	08001eb9 	.word	0x08001eb9
 8001c54:	08001eb9 	.word	0x08001eb9
 8001c58:	08001eb9 	.word	0x08001eb9
 8001c5c:	08001eb9 	.word	0x08001eb9
 8001c60:	08001eb9 	.word	0x08001eb9
 8001c64:	08001cb5 	.word	0x08001cb5
 8001c68:	08001eb9 	.word	0x08001eb9
 8001c6c:	08001eb9 	.word	0x08001eb9
 8001c70:	08001eb9 	.word	0x08001eb9
 8001c74:	08001eb9 	.word	0x08001eb9
 8001c78:	08001eb9 	.word	0x08001eb9
 8001c7c:	08001eb9 	.word	0x08001eb9
 8001c80:	08001eb9 	.word	0x08001eb9
 8001c84:	08001cbb 	.word	0x08001cbb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c88:	4b90      	ldr	r3, [pc, #576]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d009      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c94:	4b8d      	ldr	r3, [pc, #564]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	4a8c      	ldr	r2, [pc, #560]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001ca6:	e10a      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ca8:	4b89      	ldr	r3, [pc, #548]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001caa:	61bb      	str	r3, [r7, #24]
    break;
 8001cac:	e107      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001cb0:	61bb      	str	r3, [r7, #24]
    break;
 8001cb2:	e104      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001cb4:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001cb6:	61bb      	str	r3, [r7, #24]
    break;
 8001cb8:	e101      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cba:	4b84      	ldr	r3, [pc, #528]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001cc4:	4b81      	ldr	r3, [pc, #516]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001cd0:	4b7e      	ldr	r3, [pc, #504]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001cda:	4b7c      	ldr	r3, [pc, #496]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cde:	08db      	lsrs	r3, r3, #3
 8001ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80da 	beq.w	8001eb2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d05a      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x1b2>
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d302      	bcc.n	8001d0e <HAL_RCC_GetSysClockFreq+0x106>
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d078      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x1f6>
 8001d0c:	e099      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d0e:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d02d      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d1a:	4b6c      	ldr	r3, [pc, #432]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	4a6a      	ldr	r2, [pc, #424]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d44:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d54:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d58:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001edc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d74:	e087      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d80:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001ee0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d98:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d9c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001edc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001db8:	e065      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001ee4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ddc:	ed97 6a02 	vldr	s12, [r7, #8]
 8001de0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001edc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dfc:	e043      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e08:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001ee8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e20:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e24:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001edc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e40:	e021      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001ee4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e64:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e68:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001edc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e84:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	0a5b      	lsrs	r3, r3, #9
 8001e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e90:	3301      	adds	r3, #1
 8001e92:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eaa:	ee17 3a90 	vmov	r3, s15
 8001eae:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001eb0:	e005      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
    break;
 8001eb6:	e002      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001eba:	61bb      	str	r3, [r7, #24]
    break;
 8001ebc:	bf00      	nop
  }

  return sysclockfreq;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3724      	adds	r7, #36	; 0x24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	03d09000 	.word	0x03d09000
 8001ed4:	003d0900 	.word	0x003d0900
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	46000000 	.word	0x46000000
 8001ee0:	4c742400 	.word	0x4c742400
 8001ee4:	4a742400 	.word	0x4a742400
 8001ee8:	4af42400 	.word	0x4af42400

08001eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001ef2:	f7ff fe89 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f2a:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	08005074 	.word	0x08005074
 8001f44:	20000004 	.word	0x20000004
 8001f48:	20000000 	.word	0x20000000

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001f50:	f7ff ffcc 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f54:	4601      	mov	r1, r0
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	58024400 	.word	0x58024400
 8001f74:	08005074 	.word	0x08005074

08001f78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	223f      	movs	r2, #63	; 0x3f
 8001f86:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f003 0207 	and.w	r2, r3, #7
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_GetClockConfig+0x80>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	52002000 	.word	0x52002000

08001ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e049      	b.n	80020a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f841 	bl	80020aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f000 f9be 	bl	80023bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d001      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e021      	b.n	800211c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_TIM_Base_Start_IT+0x68>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d00b      	beq.n	800211a <HAL_TIM_Base_Start_IT+0x5a>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002108:	d007      	beq.n	800211a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	00010007 	.word	0x00010007

0800212c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b02      	cmp	r3, #2
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0202 	mvn.w	r2, #2
 8002158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f905 	bl	800237e <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8f7 	bl	800236a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f908 	bl	8002392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d122      	bne.n	80021dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d11b      	bne.n	80021dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0204 	mvn.w	r2, #4
 80021ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8db 	bl	800237e <HAL_TIM_IC_CaptureCallback>
 80021c8:	e005      	b.n	80021d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8cd 	bl	800236a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8de 	bl	8002392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d122      	bne.n	8002230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d11b      	bne.n	8002230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0208 	mvn.w	r2, #8
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2204      	movs	r2, #4
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8b1 	bl	800237e <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8a3 	bl	800236a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f8b4 	bl	8002392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b10      	cmp	r3, #16
 800223c:	d122      	bne.n	8002284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b10      	cmp	r3, #16
 800224a:	d11b      	bne.n	8002284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0210 	mvn.w	r2, #16
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2208      	movs	r2, #8
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f887 	bl	800237e <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f879 	bl	800236a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f88a 	bl	8002392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10e      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d107      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0201 	mvn.w	r2, #1
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fa52 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c8:	2b80      	cmp	r3, #128	; 0x80
 80022ca:	d107      	bne.n	80022dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f914 	bl	8002504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ea:	d10e      	bne.n	800230a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b80      	cmp	r3, #128	; 0x80
 80022f8:	d107      	bne.n	800230a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f907 	bl	8002518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d10e      	bne.n	8002336 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d107      	bne.n	8002336 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800232e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f838 	bl	80023a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b20      	cmp	r3, #32
 8002342:	d10e      	bne.n	8002362 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b20      	cmp	r3, #32
 8002350:	d107      	bne.n	8002362 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f06f 0220 	mvn.w	r2, #32
 800235a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f8c7 	bl	80024f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <TIM_Base_SetConfig+0x114>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023da:	d00f      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3d      	ldr	r2, [pc, #244]	; (80024d4 <TIM_Base_SetConfig+0x118>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00b      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3c      	ldr	r2, [pc, #240]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3b      	ldr	r2, [pc, #236]	; (80024dc <TIM_Base_SetConfig+0x120>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d003      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3a      	ldr	r2, [pc, #232]	; (80024e0 <TIM_Base_SetConfig+0x124>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d108      	bne.n	800240e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <TIM_Base_SetConfig+0x114>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01f      	beq.n	8002456 <TIM_Base_SetConfig+0x9a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d01b      	beq.n	8002456 <TIM_Base_SetConfig+0x9a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <TIM_Base_SetConfig+0x118>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d017      	beq.n	8002456 <TIM_Base_SetConfig+0x9a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a2b      	ldr	r2, [pc, #172]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <TIM_Base_SetConfig+0x9a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <TIM_Base_SetConfig+0x120>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00f      	beq.n	8002456 <TIM_Base_SetConfig+0x9a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <TIM_Base_SetConfig+0x124>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00b      	beq.n	8002456 <TIM_Base_SetConfig+0x9a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <TIM_Base_SetConfig+0x128>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <TIM_Base_SetConfig+0x9a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <TIM_Base_SetConfig+0x12c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d003      	beq.n	8002456 <TIM_Base_SetConfig+0x9a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <TIM_Base_SetConfig+0x130>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d108      	bne.n	8002468 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <TIM_Base_SetConfig+0x114>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00f      	beq.n	80024b4 <TIM_Base_SetConfig+0xf8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <TIM_Base_SetConfig+0x124>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00b      	beq.n	80024b4 <TIM_Base_SetConfig+0xf8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <TIM_Base_SetConfig+0x128>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <TIM_Base_SetConfig+0xf8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <TIM_Base_SetConfig+0x12c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d003      	beq.n	80024b4 <TIM_Base_SetConfig+0xf8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <TIM_Base_SetConfig+0x130>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d103      	bne.n	80024bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	615a      	str	r2, [r3, #20]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40000800 	.word	0x40000800
 80024dc:	40000c00 	.word	0x40000c00
 80024e0:	40010400 	.word	0x40010400
 80024e4:	40014000 	.word	0x40014000
 80024e8:	40014400 	.word	0x40014400
 80024ec:	40014800 	.word	0x40014800

080024f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002542:	f3ef 8305 	mrs	r3, IPSR
 8002546:	60bb      	str	r3, [r7, #8]
  return(result);
 8002548:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8310 	mrs	r3, PRIMASK
 8002552:	607b      	str	r3, [r7, #4]
  return(result);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800255a:	f3ef 8311 	mrs	r3, BASEPRI
 800255e:	603b      	str	r3, [r7, #0]
  return(result);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <osKernelInitialize+0x3a>
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <osKernelInitialize+0x64>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d103      	bne.n	8002576 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800256e:	f06f 0305 	mvn.w	r3, #5
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e00c      	b.n	8002590 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <osKernelInitialize+0x64>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <osKernelInitialize+0x64>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e002      	b.n	8002590 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800258e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000030 	.word	0x20000030

080025a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025aa:	f3ef 8305 	mrs	r3, IPSR
 80025ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80025b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ba:	607b      	str	r3, [r7, #4]
  return(result);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d105      	bne.n	80025ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c2:	f3ef 8311 	mrs	r3, BASEPRI
 80025c6:	603b      	str	r3, [r7, #0]
  return(result);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <osKernelStart+0x3a>
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <osKernelStart+0x68>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d103      	bne.n	80025de <osKernelStart+0x3a>
    stat = osErrorISR;
 80025d6:	f06f 0305 	mvn.w	r3, #5
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e010      	b.n	8002600 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <osKernelStart+0x68>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d109      	bne.n	80025fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025e6:	f7ff ffa1 	bl	800252c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <osKernelStart+0x68>)
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025f0:	f001 fc84 	bl	8003efc <vTaskStartScheduler>
      stat = osOK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e002      	b.n	8002600 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002600:	68fb      	ldr	r3, [r7, #12]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000030 	.word	0x20000030

08002610 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b090      	sub	sp, #64	; 0x40
 8002614:	af04      	add	r7, sp, #16
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002620:	f3ef 8305 	mrs	r3, IPSR
 8002624:	61fb      	str	r3, [r7, #28]
  return(result);
 8002626:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 808f 	bne.w	800274c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800262e:	f3ef 8310 	mrs	r3, PRIMASK
 8002632:	61bb      	str	r3, [r7, #24]
  return(result);
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d105      	bne.n	8002646 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800263a:	f3ef 8311 	mrs	r3, BASEPRI
 800263e:	617b      	str	r3, [r7, #20]
  return(result);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <osThreadNew+0x3e>
 8002646:	4b44      	ldr	r3, [pc, #272]	; (8002758 <osThreadNew+0x148>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d07e      	beq.n	800274c <osThreadNew+0x13c>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d07b      	beq.n	800274c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002658:	2318      	movs	r3, #24
 800265a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002664:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d045      	beq.n	80026f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <osThreadNew+0x6a>
        name = attr->name;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <osThreadNew+0x90>
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2b38      	cmp	r3, #56	; 0x38
 8002692:	d805      	bhi.n	80026a0 <osThreadNew+0x90>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <osThreadNew+0x94>
        return (NULL);
 80026a0:	2300      	movs	r3, #0
 80026a2:	e054      	b.n	800274e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <osThreadNew+0xca>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b5b      	cmp	r3, #91	; 0x5b
 80026c2:	d90a      	bls.n	80026da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <osThreadNew+0xca>
        mem = 1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	e010      	b.n	80026fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <osThreadNew+0xec>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d108      	bne.n	80026fc <osThreadNew+0xec>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <osThreadNew+0xec>
          mem = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	e001      	b.n	80026fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d110      	bne.n	8002724 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800270a:	9202      	str	r2, [sp, #8]
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f001 fa1d 	bl	8003b58 <xTaskCreateStatic>
 800271e:	4603      	mov	r3, r0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e013      	b.n	800274c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d110      	bne.n	800274c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	b29a      	uxth	r2, r3
 800272e:	f107 0310 	add.w	r3, r7, #16
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f001 fa65 	bl	8003c0c <xTaskCreate>
 8002742:	4603      	mov	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d001      	beq.n	800274c <osThreadNew+0x13c>
          hTask = NULL;
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800274c:	693b      	ldr	r3, [r7, #16]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3730      	adds	r7, #48	; 0x30
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000030 	.word	0x20000030

0800275c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002764:	f3ef 8305 	mrs	r3, IPSR
 8002768:	613b      	str	r3, [r7, #16]
  return(result);
 800276a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10f      	bne.n	8002790 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002770:	f3ef 8310 	mrs	r3, PRIMASK
 8002774:	60fb      	str	r3, [r7, #12]
  return(result);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800277c:	f3ef 8311 	mrs	r3, BASEPRI
 8002780:	60bb      	str	r3, [r7, #8]
  return(result);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <osDelay+0x3c>
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <osDelay+0x58>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d103      	bne.n	8002798 <osDelay+0x3c>
    stat = osErrorISR;
 8002790:	f06f 0305 	mvn.w	r3, #5
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e007      	b.n	80027a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f001 fb76 	bl	8003e94 <vTaskDelay>
    }
  }

  return (stat);
 80027a8:	697b      	ldr	r3, [r7, #20]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000030 	.word	0x20000030

080027b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80027c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <vApplicationGetIdleTaskMemory+0x30>)
 80027ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000034 	.word	0x20000034
 80027e8:	20000090 	.word	0x20000090

080027ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a07      	ldr	r2, [pc, #28]	; (8002818 <vApplicationGetTimerTaskMemory+0x2c>)
 80027fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4a06      	ldr	r2, [pc, #24]	; (800281c <vApplicationGetTimerTaskMemory+0x30>)
 8002802:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280a:	601a      	str	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	20000290 	.word	0x20000290
 800281c:	200002ec 	.word	0x200002ec

08002820 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800282c:	f001 fbca 	bl	8003fc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002830:	4b57      	ldr	r3, [pc, #348]	; (8002990 <pvPortMalloc+0x170>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002838:	f000 f90c 	bl	8002a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800283c:	4b55      	ldr	r3, [pc, #340]	; (8002994 <pvPortMalloc+0x174>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 808c 	bne.w	8002962 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01c      	beq.n	800288a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002850:	2208      	movs	r2, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	2b00      	cmp	r3, #0
 8002860:	d013      	beq.n	800288a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f023 0307 	bic.w	r3, r3, #7
 8002868:	3308      	adds	r3, #8
 800286a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e7fe      	b.n	8002888 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d068      	beq.n	8002962 <pvPortMalloc+0x142>
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <pvPortMalloc+0x178>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	d863      	bhi.n	8002962 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <pvPortMalloc+0x17c>)
 800289c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <pvPortMalloc+0x17c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028a4:	e004      	b.n	80028b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d903      	bls.n	80028c2 <pvPortMalloc+0xa2>
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f1      	bne.n	80028a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <pvPortMalloc+0x170>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d04a      	beq.n	8002962 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4413      	add	r3, r2
 80028d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	1ad2      	subs	r2, r2, r3
 80028e6:	2308      	movs	r3, #8
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d91e      	bls.n	800292c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <pvPortMalloc+0xf4>
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e7fe      	b.n	8002912 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1ad2      	subs	r2, r2, r3
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002926:	69b8      	ldr	r0, [r7, #24]
 8002928:	f000 f8f6 	bl	8002b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <pvPortMalloc+0x178>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	4a18      	ldr	r2, [pc, #96]	; (8002998 <pvPortMalloc+0x178>)
 8002938:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800293a:	4b17      	ldr	r3, [pc, #92]	; (8002998 <pvPortMalloc+0x178>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <pvPortMalloc+0x180>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d203      	bcs.n	800294e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <pvPortMalloc+0x178>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <pvPortMalloc+0x180>)
 800294c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <pvPortMalloc+0x174>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	431a      	orrs	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002962:	f001 fb3d 	bl	8003fe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <pvPortMalloc+0x164>
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e7fe      	b.n	8002982 <pvPortMalloc+0x162>
	return pvReturn;
 8002984:	69fb      	ldr	r3, [r7, #28]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3728      	adds	r7, #40	; 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200042f4 	.word	0x200042f4
 8002994:	20004300 	.word	0x20004300
 8002998:	200042f8 	.word	0x200042f8
 800299c:	200042ec 	.word	0x200042ec
 80029a0:	200042fc 	.word	0x200042fc

080029a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d046      	beq.n	8002a44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80029b6:	2308      	movs	r3, #8
 80029b8:	425b      	negs	r3, r3
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4413      	add	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <vPortFree+0xa8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <vPortFree+0x42>
 80029d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e7fe      	b.n	80029e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <vPortFree+0x5e>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	e7fe      	b.n	8002a00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <vPortFree+0xa8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d019      	beq.n	8002a44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d115      	bne.n	8002a44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <vPortFree+0xa8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002a28:	f001 facc 	bl	8003fc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <vPortFree+0xac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <vPortFree+0xac>)
 8002a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a3a:	6938      	ldr	r0, [r7, #16]
 8002a3c:	f000 f86c 	bl	8002b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002a40:	f001 face 	bl	8003fe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20004300 	.word	0x20004300
 8002a50:	200042f8 	.word	0x200042f8

08002a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <prvHeapInit+0xac>)
 8002a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3307      	adds	r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0307 	bic.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <prvHeapInit+0xac>)
 8002a84:	4413      	add	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <prvHeapInit+0xb0>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <prvHeapInit+0xb0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0307 	bic.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <prvHeapInit+0xb4>)
 8002ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <prvHeapInit+0xb4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <prvHeapInit+0xb4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	1ad2      	subs	r2, r2, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <prvHeapInit+0xb4>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <prvHeapInit+0xb8>)
 8002ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <prvHeapInit+0xbc>)
 8002aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <prvHeapInit+0xc0>)
 8002aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	200006ec 	.word	0x200006ec
 8002b04:	200042ec 	.word	0x200042ec
 8002b08:	200042f4 	.word	0x200042f4
 8002b0c:	200042fc 	.word	0x200042fc
 8002b10:	200042f8 	.word	0x200042f8
 8002b14:	20004300 	.word	0x20004300

08002b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <prvInsertBlockIntoFreeList+0xac>)
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e002      	b.n	8002b2c <prvInsertBlockIntoFreeList+0x14>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d8f7      	bhi.n	8002b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d108      	bne.n	8002b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	441a      	add	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	441a      	add	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d118      	bne.n	8002ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d00d      	beq.n	8002b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	441a      	add	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e008      	b.n	8002ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e003      	b.n	8002ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d002      	beq.n	8002bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	200042ec 	.word	0x200042ec
 8002bc8:	200042f4 	.word	0x200042f4

08002bcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f103 0208 	add.w	r2, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f103 0208 	add.w	r2, r3, #8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f103 0208 	add.w	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c84:	d103      	bne.n	8002c8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e00c      	b.n	8002ca8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3308      	adds	r3, #8
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e002      	b.n	8002c9c <vListInsert+0x2e>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d2f6      	bcs.n	8002c96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6892      	ldr	r2, [r2, #8]
 8002cf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6852      	ldr	r2, [r2, #4]
 8002d00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d103      	bne.n	8002d14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1e5a      	subs	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3b04      	subs	r3, #4
 8002d44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b04      	subs	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f023 0201 	bic.w	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b04      	subs	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d64:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <pxPortInitialiseStack+0x64>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3b14      	subs	r3, #20
 8002d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3b04      	subs	r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f06f 0202 	mvn.w	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3b20      	subs	r3, #32
 8002d88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	08002d9d 	.word	0x08002d9d

08002d9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <prvTaskExitError+0x50>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dae:	d009      	beq.n	8002dc4 <prvTaskExitError+0x28>
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e7fe      	b.n	8002dc2 <prvTaskExitError+0x26>
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002dd6:	bf00      	nop
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0fc      	beq.n	8002dd8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000010 	.word	0x20000010

08002df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <pxCurrentTCBConst2>)
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	6808      	ldr	r0, [r1, #0]
 8002df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	f380 8809 	msr	PSP, r0
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f380 8811 	msr	BASEPRI, r0
 8002e0a:	4770      	bx	lr
 8002e0c:	f3af 8000 	nop.w

08002e10 <pxCurrentTCBConst2>:
 8002e10:	2000430c 	.word	0x2000430c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop

08002e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002e18:	4808      	ldr	r0, [pc, #32]	; (8002e3c <prvPortStartFirstTask+0x24>)
 8002e1a:	6800      	ldr	r0, [r0, #0]
 8002e1c:	6800      	ldr	r0, [r0, #0]
 8002e1e:	f380 8808 	msr	MSP, r0
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f380 8814 	msr	CONTROL, r0
 8002e2a:	b662      	cpsie	i
 8002e2c:	b661      	cpsie	f
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	df00      	svc	0
 8002e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e3a:	bf00      	nop
 8002e3c:	e000ed08 	.word	0xe000ed08

08002e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e46:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <xPortStartScheduler+0x118>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <xPortStartScheduler+0x11c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d109      	bne.n	8002e64 <xPortStartScheduler+0x24>
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	e7fe      	b.n	8002e62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e64:	4b3c      	ldr	r3, [pc, #240]	; (8002f58 <xPortStartScheduler+0x118>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a3d      	ldr	r2, [pc, #244]	; (8002f60 <xPortStartScheduler+0x120>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d109      	bne.n	8002e82 <xPortStartScheduler+0x42>
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e7fe      	b.n	8002e80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <xPortStartScheduler+0x124>)
 8002e84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	22ff      	movs	r2, #255	; 0xff
 8002e92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <xPortStartScheduler+0x128>)
 8002ea8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002eaa:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <xPortStartScheduler+0x12c>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002eb0:	e009      	b.n	8002ec6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <xPortStartScheduler+0x12c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <xPortStartScheduler+0x12c>)
 8002eba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b80      	cmp	r3, #128	; 0x80
 8002ed0:	d0ef      	beq.n	8002eb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <xPortStartScheduler+0x12c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d009      	beq.n	8002ef2 <xPortStartScheduler+0xb2>
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	e7fe      	b.n	8002ef0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <xPortStartScheduler+0x12c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <xPortStartScheduler+0x12c>)
 8002efa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <xPortStartScheduler+0x12c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <xPortStartScheduler+0x12c>)
 8002f06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <xPortStartScheduler+0x130>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <xPortStartScheduler+0x130>)
 8002f16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <xPortStartScheduler+0x130>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <xPortStartScheduler+0x130>)
 8002f22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f28:	f000 f8d6 	bl	80030d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <xPortStartScheduler+0x134>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f32:	f000 f8f5 	bl	8003120 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <xPortStartScheduler+0x138>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a0f      	ldr	r2, [pc, #60]	; (8002f78 <xPortStartScheduler+0x138>)
 8002f3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f42:	f7ff ff69 	bl	8002e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f46:	f001 f9af 	bl	80042a8 <vTaskSwitchContext>
	prvTaskExitError();
 8002f4a:	f7ff ff27 	bl	8002d9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	e000ed00 	.word	0xe000ed00
 8002f5c:	410fc271 	.word	0x410fc271
 8002f60:	410fc270 	.word	0x410fc270
 8002f64:	e000e400 	.word	0xe000e400
 8002f68:	20004304 	.word	0x20004304
 8002f6c:	20004308 	.word	0x20004308
 8002f70:	e000ed20 	.word	0xe000ed20
 8002f74:	20000010 	.word	0x20000010
 8002f78:	e000ef34 	.word	0xe000ef34

08002f7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <vPortEnterCritical+0x54>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <vPortEnterCritical+0x54>)
 8002f9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <vPortEnterCritical+0x54>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10e      	bne.n	8002fc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <vPortEnterCritical+0x58>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <vPortEnterCritical+0x48>
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	e7fe      	b.n	8002fc2 <vPortEnterCritical+0x46>
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	20000010 	.word	0x20000010
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <vPortExitCritical+0x4c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <vPortExitCritical+0x22>
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	e7fe      	b.n	8002ff8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <vPortExitCritical+0x4c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	4a08      	ldr	r2, [pc, #32]	; (8003024 <vPortExitCritical+0x4c>)
 8003002:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003004:	4b07      	ldr	r3, [pc, #28]	; (8003024 <vPortExitCritical+0x4c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <vPortExitCritical+0x3e>
 800300c:	2300      	movs	r3, #0
 800300e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000010 	.word	0x20000010
	...

08003030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003030:	f3ef 8009 	mrs	r0, PSP
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <pxCurrentTCBConst>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	f01e 0f10 	tst.w	lr, #16
 8003040:	bf08      	it	eq
 8003042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800304a:	6010      	str	r0, [r2, #0]
 800304c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003054:	f380 8811 	msr	BASEPRI, r0
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f001 f922 	bl	80042a8 <vTaskSwitchContext>
 8003064:	f04f 0000 	mov.w	r0, #0
 8003068:	f380 8811 	msr	BASEPRI, r0
 800306c:	bc09      	pop	{r0, r3}
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	6808      	ldr	r0, [r1, #0]
 8003072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003076:	f01e 0f10 	tst.w	lr, #16
 800307a:	bf08      	it	eq
 800307c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003080:	f380 8809 	msr	PSP, r0
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	f3af 8000 	nop.w

08003090 <pxCurrentTCBConst>:
 8003090:	2000430c 	.word	0x2000430c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop

08003098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030b0:	f001 f842 	bl	8004138 <xTaskIncrementTick>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <SysTick_Handler+0x3c>)
 80030bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	2300      	movs	r3, #0
 80030c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	e000ed04 	.word	0xe000ed04

080030d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <vPortSetupTimerInterrupt+0x34>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <vPortSetupTimerInterrupt+0x38>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <vPortSetupTimerInterrupt+0x3c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <vPortSetupTimerInterrupt+0x40>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <vPortSetupTimerInterrupt+0x44>)
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <vPortSetupTimerInterrupt+0x34>)
 80030fc:	2207      	movs	r2, #7
 80030fe:	601a      	str	r2, [r3, #0]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e010 	.word	0xe000e010
 8003110:	e000e018 	.word	0xe000e018
 8003114:	20000000 	.word	0x20000000
 8003118:	10624dd3 	.word	0x10624dd3
 800311c:	e000e014 	.word	0xe000e014

08003120 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003120:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003130 <vPortEnableVFP+0x10>
 8003124:	6801      	ldr	r1, [r0, #0]
 8003126:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800312a:	6001      	str	r1, [r0, #0]
 800312c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800312e:	bf00      	nop
 8003130:	e000ed88 	.word	0xe000ed88

08003134 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800313a:	f3ef 8305 	mrs	r3, IPSR
 800313e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b0f      	cmp	r3, #15
 8003144:	d913      	bls.n	800316e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003146:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <vPortValidateInterruptPriority+0x6c>)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <vPortValidateInterruptPriority+0x70>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	7afa      	ldrb	r2, [r7, #11]
 8003156:	429a      	cmp	r2, r3
 8003158:	d209      	bcs.n	800316e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	e7fe      	b.n	800316c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <vPortValidateInterruptPriority+0x74>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <vPortValidateInterruptPriority+0x78>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d909      	bls.n	8003192 <vPortValidateInterruptPriority+0x5e>
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	e7fe      	b.n	8003190 <vPortValidateInterruptPriority+0x5c>
	}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000e3f0 	.word	0xe000e3f0
 80031a4:	20004304 	.word	0x20004304
 80031a8:	e000ed0c 	.word	0xe000ed0c
 80031ac:	20004308 	.word	0x20004308

080031b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <xQueueGenericReset+0x28>
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	e7fe      	b.n	80031d6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80031d8:	f7ff fed0 	bl	8002f7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	441a      	add	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	3b01      	subs	r3, #1
 800320a:	68f9      	ldr	r1, [r7, #12]
 800320c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	441a      	add	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	22ff      	movs	r2, #255	; 0xff
 800321c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d114      	bne.n	8003258 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01a      	beq.n	800326c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3310      	adds	r3, #16
 800323a:	4618      	mov	r0, r3
 800323c:	f001 f8de 	bl	80043fc <xTaskRemoveFromEventList>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <xQueueGenericReset+0xcc>)
 8003248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	e009      	b.n	800326c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3310      	adds	r3, #16
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fcb5 	bl	8002bcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3324      	adds	r3, #36	; 0x24
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fcb0 	bl	8002bcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800326c:	f7ff feb4 	bl	8002fd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003270:	2301      	movs	r3, #1
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08e      	sub	sp, #56	; 0x38
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <xQueueGenericCreateStatic+0x28>
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a6:	e7fe      	b.n	80032a6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <xQueueGenericCreateStatic+0x42>
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
 80032c0:	e7fe      	b.n	80032c0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <xQueueGenericCreateStatic+0x4e>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <xQueueGenericCreateStatic+0x52>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <xQueueGenericCreateStatic+0x54>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <xQueueGenericCreateStatic+0x6c>
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	e7fe      	b.n	80032ea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <xQueueGenericCreateStatic+0x78>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <xQueueGenericCreateStatic+0x7c>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <xQueueGenericCreateStatic+0x7e>
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <xQueueGenericCreateStatic+0x96>
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	e7fe      	b.n	8003314 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003316:	2350      	movs	r3, #80	; 0x50
 8003318:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b50      	cmp	r3, #80	; 0x50
 800331e:	d009      	beq.n	8003334 <xQueueGenericCreateStatic+0xb4>
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	e7fe      	b.n	8003332 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003334:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003348:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f805 	bl	8003366 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e002      	b.n	8003388 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003394:	2101      	movs	r1, #1
 8003396:	69b8      	ldr	r0, [r7, #24]
 8003398:	f7ff ff0a 	bl	80031b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033ba:	2300      	movs	r3, #0
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <xQueueGenericSend+0x30>
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033da:	e7fe      	b.n	80033da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <xQueueGenericSend+0x3e>
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <xQueueGenericSend+0x42>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <xQueueGenericSend+0x44>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <xQueueGenericSend+0x5c>
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	e7fe      	b.n	8003406 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d103      	bne.n	8003416 <xQueueGenericSend+0x6a>
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <xQueueGenericSend+0x6e>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <xQueueGenericSend+0x70>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <xQueueGenericSend+0x88>
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	e7fe      	b.n	8003432 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003434:	f001 f998 	bl	8004768 <xTaskGetSchedulerState>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <xQueueGenericSend+0x98>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <xQueueGenericSend+0x9c>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <xQueueGenericSend+0x9e>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <xQueueGenericSend+0xb6>
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	e7fe      	b.n	8003460 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003462:	f7ff fd8b 	bl	8002f7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <xQueueGenericSend+0xcc>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d129      	bne.n	80034cc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800347e:	f000 f9ff 	bl	8003880 <prvCopyDataToQueue>
 8003482:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	4618      	mov	r0, r3
 8003492:	f000 ffb3 	bl	80043fc <xTaskRemoveFromEventList>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800349c:	4b3f      	ldr	r3, [pc, #252]	; (800359c <xQueueGenericSend+0x1f0>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	e00a      	b.n	80034c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034b4:	4b39      	ldr	r3, [pc, #228]	; (800359c <xQueueGenericSend+0x1f0>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034c4:	f7ff fd88 	bl	8002fd8 <vPortExitCritical>
				return pdPASS;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e063      	b.n	8003594 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034d2:	f7ff fd81 	bl	8002fd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e05c      	b.n	8003594 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 ffeb 	bl	80044c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034ee:	f7ff fd73 	bl	8002fd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034f2:	f000 fd67 	bl	8003fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034f6:	f7ff fd41 	bl	8002f7c <vPortEnterCritical>
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003500:	b25b      	sxtb	r3, r3
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003506:	d103      	bne.n	8003510 <xQueueGenericSend+0x164>
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003516:	b25b      	sxtb	r3, r3
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800351c:	d103      	bne.n	8003526 <xQueueGenericSend+0x17a>
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003526:	f7ff fd57 	bl	8002fd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800352a:	1d3a      	adds	r2, r7, #4
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f000 ffda 	bl	80044ec <xTaskCheckForTimeOut>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d124      	bne.n	8003588 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800353e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003540:	f000 fa96 	bl	8003a70 <prvIsQueueFull>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	3310      	adds	r3, #16
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f000 ff04 	bl	8004360 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355a:	f000 fa21 	bl	80039a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800355e:	f000 fd3f 	bl	8003fe0 <xTaskResumeAll>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f af7c 	bne.w	8003462 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <xQueueGenericSend+0x1f0>)
 800356c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	e772      	b.n	8003462 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800357c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800357e:	f000 fa0f 	bl	80039a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003582:	f000 fd2d 	bl	8003fe0 <xTaskResumeAll>
 8003586:	e76c      	b.n	8003462 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358a:	f000 fa09 	bl	80039a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800358e:	f000 fd27 	bl	8003fe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003592:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003594:	4618      	mov	r0, r3
 8003596:	3738      	adds	r7, #56	; 0x38
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	; 0x38
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <xQueueGenericSendFromISR+0x2c>
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	e7fe      	b.n	80035ca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <xQueueGenericSendFromISR+0x3a>
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <xQueueGenericSendFromISR+0x3e>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <xQueueGenericSendFromISR+0x40>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <xQueueGenericSendFromISR+0x58>
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	e7fe      	b.n	80035f6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d103      	bne.n	8003606 <xQueueGenericSendFromISR+0x66>
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <xQueueGenericSendFromISR+0x6a>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <xQueueGenericSendFromISR+0x6c>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <xQueueGenericSendFromISR+0x84>
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e7fe      	b.n	8003622 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003624:	f7ff fd86 	bl	8003134 <vPortValidateInterruptPriority>
	__asm volatile
 8003628:	f3ef 8211 	mrs	r2, BASEPRI
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	61ba      	str	r2, [r7, #24]
 800363e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003640:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <xQueueGenericSendFromISR+0xb6>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d12c      	bne.n	80036b0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800365c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003666:	f000 f90b 	bl	8003880 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800366a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003672:	d112      	bne.n	800369a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d016      	beq.n	80036aa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	4618      	mov	r0, r3
 8003682:	f000 febb 	bl	80043fc <xTaskRemoveFromEventList>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e007      	b.n	80036aa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800369a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800369e:	3301      	adds	r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	b25a      	sxtb	r2, r3
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036aa:	2301      	movs	r3, #1
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036ae:	e001      	b.n	80036b4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3738      	adds	r7, #56	; 0x38
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <xQueueReceive+0x2e>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	e7fe      	b.n	80036f4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <xQueueReceive+0x3c>
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <xQueueReceive+0x40>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <xQueueReceive+0x42>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <xQueueReceive+0x5a>
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	e7fe      	b.n	8003720 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003722:	f001 f821 	bl	8004768 <xTaskGetSchedulerState>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <xQueueReceive+0x6a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <xQueueReceive+0x6e>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <xQueueReceive+0x70>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <xQueueReceive+0x88>
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	e7fe      	b.n	800374e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003750:	f7ff fc14 	bl	8002f7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01f      	beq.n	80037a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003764:	f000 f8f6 	bl	8003954 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	1e5a      	subs	r2, r3, #1
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00f      	beq.n	8003798 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	3310      	adds	r3, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fe3d 	bl	80043fc <xTaskRemoveFromEventList>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003788:	4b3c      	ldr	r3, [pc, #240]	; (800387c <xQueueReceive+0x1b4>)
 800378a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003798:	f7ff fc1e 	bl	8002fd8 <vPortExitCritical>
				return pdPASS;
 800379c:	2301      	movs	r3, #1
 800379e:	e069      	b.n	8003874 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037a6:	f7ff fc17 	bl	8002fd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e062      	b.n	8003874 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037b4:	f107 0310 	add.w	r3, r7, #16
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fe81 	bl	80044c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037c2:	f7ff fc09 	bl	8002fd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037c6:	f000 fbfd 	bl	8003fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037ca:	f7ff fbd7 	bl	8002f7c <vPortEnterCritical>
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037da:	d103      	bne.n	80037e4 <xQueueReceive+0x11c>
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f0:	d103      	bne.n	80037fa <xQueueReceive+0x132>
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037fa:	f7ff fbed 	bl	8002fd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037fe:	1d3a      	adds	r2, r7, #4
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fe70 	bl	80044ec <xTaskCheckForTimeOut>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d123      	bne.n	800385a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003814:	f000 f916 	bl	8003a44 <prvIsQueueEmpty>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	3324      	adds	r3, #36	; 0x24
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fd9a 	bl	8004360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800382c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382e:	f000 f8b7 	bl	80039a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003832:	f000 fbd5 	bl	8003fe0 <xTaskResumeAll>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d189      	bne.n	8003750 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <xQueueReceive+0x1b4>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	e780      	b.n	8003750 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800384e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003850:	f000 f8a6 	bl	80039a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003854:	f000 fbc4 	bl	8003fe0 <xTaskResumeAll>
 8003858:	e77a      	b.n	8003750 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800385a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385c:	f000 f8a0 	bl	80039a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003860:	f000 fbbe 	bl	8003fe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003866:	f000 f8ed 	bl	8003a44 <prvIsQueueEmpty>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f43f af6f 	beq.w	8003750 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003872:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003874:	4618      	mov	r0, r3
 8003876:	3730      	adds	r7, #48	; 0x30
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10d      	bne.n	80038ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d14d      	bne.n	8003942 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 ff7a 	bl	80047a4 <xTaskPriorityDisinherit>
 80038b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	e043      	b.n	8003942 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d119      	bne.n	80038f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6858      	ldr	r0, [r3, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	461a      	mov	r2, r3
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	f001 fb94 	bl	8004ff8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	441a      	add	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d32b      	bcc.n	8003942 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	e026      	b.n	8003942 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68d8      	ldr	r0, [r3, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	461a      	mov	r2, r3
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	f001 fb7a 	bl	8004ff8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	425b      	negs	r3, r3
 800390e:	441a      	add	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	425b      	negs	r3, r3
 800392a:	441a      	add	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d105      	bne.n	8003942 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	3b01      	subs	r3, #1
 8003940:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800394a:	697b      	ldr	r3, [r7, #20]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	441a      	add	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d303      	bcc.n	8003988 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68d9      	ldr	r1, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	461a      	mov	r2, r3
 8003992:	6838      	ldr	r0, [r7, #0]
 8003994:	f001 fb30 	bl	8004ff8 <memcpy>
	}
}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039a8:	f7ff fae8 	bl	8002f7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039b4:	e011      	b.n	80039da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d012      	beq.n	80039e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3324      	adds	r3, #36	; 0x24
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fd1a 	bl	80043fc <xTaskRemoveFromEventList>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039ce:	f000 fded 	bl	80045ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	dce9      	bgt.n	80039b6 <prvUnlockQueue+0x16>
 80039e2:	e000      	b.n	80039e6 <prvUnlockQueue+0x46>
					break;
 80039e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039ee:	f7ff faf3 	bl	8002fd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039f2:	f7ff fac3 	bl	8002f7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039fe:	e011      	b.n	8003a24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d012      	beq.n	8003a2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fcf5 	bl	80043fc <xTaskRemoveFromEventList>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a18:	f000 fdc8 	bl	80045ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a1c:	7bbb      	ldrb	r3, [r7, #14]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	dce9      	bgt.n	8003a00 <prvUnlockQueue+0x60>
 8003a2c:	e000      	b.n	8003a30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a38:	f7ff face 	bl	8002fd8 <vPortExitCritical>
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a4c:	f7ff fa96 	bl	8002f7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e001      	b.n	8003a62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a62:	f7ff fab9 	bl	8002fd8 <vPortExitCritical>

	return xReturn;
 8003a66:	68fb      	ldr	r3, [r7, #12]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a78:	f7ff fa80 	bl	8002f7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d102      	bne.n	8003a8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e001      	b.n	8003a92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a92:	f7ff faa1 	bl	8002fd8 <vPortExitCritical>

	return xReturn;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e014      	b.n	8003ada <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ab0:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <vQueueAddToRegistry+0x4c>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10b      	bne.n	8003ad4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003abc:	490b      	ldr	r1, [pc, #44]	; (8003aec <vQueueAddToRegistry+0x4c>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <vQueueAddToRegistry+0x4c>)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ad2:	e005      	b.n	8003ae0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b07      	cmp	r3, #7
 8003ade:	d9e7      	bls.n	8003ab0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	20004994 	.word	0x20004994

08003af0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b00:	f7ff fa3c 	bl	8002f7c <vPortEnterCritical>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b0a:	b25b      	sxtb	r3, r3
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b10:	d103      	bne.n	8003b1a <vQueueWaitForMessageRestricted+0x2a>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b26:	d103      	bne.n	8003b30 <vQueueWaitForMessageRestricted+0x40>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b30:	f7ff fa52 	bl	8002fd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3324      	adds	r3, #36	; 0x24
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fc2f 	bl	80043a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f7ff ff28 	bl	80039a0 <prvUnlockQueue>
	}
 8003b50:	bf00      	nop
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	; 0x38
 8003b5c:	af04      	add	r7, sp, #16
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <xTaskCreateStatic+0x28>
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	623b      	str	r3, [r7, #32]
 8003b7e:	e7fe      	b.n	8003b7e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <xTaskCreateStatic+0x42>
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	e7fe      	b.n	8003b98 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b9a:	235c      	movs	r3, #92	; 0x5c
 8003b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b5c      	cmp	r3, #92	; 0x5c
 8003ba2:	d009      	beq.n	8003bb8 <xTaskCreateStatic+0x60>
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e7fe      	b.n	8003bb6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01e      	beq.n	8003bfe <xTaskCreateStatic+0xa6>
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01b      	beq.n	8003bfe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9303      	str	r3, [sp, #12]
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f850 	bl	8003c96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf8:	f000 f8dc 	bl	8003db4 <prvAddNewTaskToReadyList>
 8003bfc:	e001      	b.n	8003c02 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c02:	697b      	ldr	r3, [r7, #20]
	}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08c      	sub	sp, #48	; 0x30
 8003c10:	af04      	add	r7, sp, #16
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fdfd 	bl	8002820 <pvPortMalloc>
 8003c26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c2e:	205c      	movs	r0, #92	; 0x5c
 8003c30:	f7fe fdf6 	bl	8002820 <pvPortMalloc>
 8003c34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
 8003c42:	e005      	b.n	8003c50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c44:	6978      	ldr	r0, [r7, #20]
 8003c46:	f7fe fead 	bl	80029a4 <vPortFree>
 8003c4a:	e001      	b.n	8003c50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d017      	beq.n	8003c86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	2300      	movs	r3, #0
 8003c62:	9303      	str	r3, [sp, #12]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	9302      	str	r3, [sp, #8]
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f80e 	bl	8003c96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c7a:	69f8      	ldr	r0, [r7, #28]
 8003c7c:	f000 f89a 	bl	8003db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c80:	2301      	movs	r3, #1
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e002      	b.n	8003c8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
	}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b088      	sub	sp, #32
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	461a      	mov	r2, r3
 8003cae:	21a5      	movs	r1, #165	; 0xa5
 8003cb0:	f001 f9ad 	bl	800500e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003cbe:	440b      	add	r3, r1
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f023 0307 	bic.w	r3, r3, #7
 8003ccc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <prvInitialiseNewTask+0x56>
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e7fe      	b.n	8003cea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01f      	beq.n	8003d32 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e012      	b.n	8003d1e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	7819      	ldrb	r1, [r3, #0]
 8003d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	3334      	adds	r3, #52	; 0x34
 8003d08:	460a      	mov	r2, r1
 8003d0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d006      	beq.n	8003d26 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d9e9      	bls.n	8003cf8 <prvInitialiseNewTask+0x62>
 8003d24:	e000      	b.n	8003d28 <prvInitialiseNewTask+0x92>
			{
				break;
 8003d26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d30:	e003      	b.n	8003d3a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	2b37      	cmp	r3, #55	; 0x37
 8003d3e:	d901      	bls.n	8003d44 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d40:	2337      	movs	r3, #55	; 0x37
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	2200      	movs	r2, #0
 8003d54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe ff56 	bl	8002c0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	3318      	adds	r3, #24
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe ff51 	bl	8002c0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	2200      	movs	r2, #0
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	68f9      	ldr	r1, [r7, #12]
 8003d92:	69b8      	ldr	r0, [r7, #24]
 8003d94:	f7fe ffce 	bl	8002d34 <pxPortInitialiseStack>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003daa:	bf00      	nop
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003dbc:	f7ff f8de 	bl	8002f7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003dc0:	4b2d      	ldr	r3, [pc, #180]	; (8003e78 <prvAddNewTaskToReadyList+0xc4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <prvAddNewTaskToReadyList+0xc4>)
 8003dc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dca:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <prvAddNewTaskToReadyList+0xc8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003dd2:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <prvAddNewTaskToReadyList+0xc8>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dd8:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <prvAddNewTaskToReadyList+0xc4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d110      	bne.n	8003e02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003de0:	f000 fc08 	bl	80045f4 <prvInitialiseTaskLists>
 8003de4:	e00d      	b.n	8003e02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <prvAddNewTaskToReadyList+0xcc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <prvAddNewTaskToReadyList+0xc8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d802      	bhi.n	8003e02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003dfc:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <prvAddNewTaskToReadyList+0xc8>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e02:	4b20      	ldr	r3, [pc, #128]	; (8003e84 <prvAddNewTaskToReadyList+0xd0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3301      	adds	r3, #1
 8003e08:	4a1e      	ldr	r2, [pc, #120]	; (8003e84 <prvAddNewTaskToReadyList+0xd0>)
 8003e0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <prvAddNewTaskToReadyList+0xd0>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <prvAddNewTaskToReadyList+0xd4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d903      	bls.n	8003e28 <prvAddNewTaskToReadyList+0x74>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <prvAddNewTaskToReadyList+0xd4>)
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <prvAddNewTaskToReadyList+0xd8>)
 8003e36:	441a      	add	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f7fe fef1 	bl	8002c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e44:	f7ff f8c8 	bl	8002fd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e48:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <prvAddNewTaskToReadyList+0xcc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00e      	beq.n	8003e6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <prvAddNewTaskToReadyList+0xc8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d207      	bcs.n	8003e6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <prvAddNewTaskToReadyList+0xdc>)
 8003e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200047e0 	.word	0x200047e0
 8003e7c:	2000430c 	.word	0x2000430c
 8003e80:	200047ec 	.word	0x200047ec
 8003e84:	200047fc 	.word	0x200047fc
 8003e88:	200047e8 	.word	0x200047e8
 8003e8c:	20004310 	.word	0x20004310
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <vTaskDelay+0x60>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <vTaskDelay+0x2e>
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	e7fe      	b.n	8003ec0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003ec2:	f000 f87f 	bl	8003fc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fcd7 	bl	800487c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ece:	f000 f887 	bl	8003fe0 <xTaskResumeAll>
 8003ed2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <vTaskDelay+0x64>)
 8003edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20004808 	.word	0x20004808
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f0a:	463a      	mov	r2, r7
 8003f0c:	1d39      	adds	r1, r7, #4
 8003f0e:	f107 0308 	add.w	r3, r7, #8
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fc50 	bl	80027b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	9202      	str	r2, [sp, #8]
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2300      	movs	r3, #0
 8003f28:	460a      	mov	r2, r1
 8003f2a:	4920      	ldr	r1, [pc, #128]	; (8003fac <vTaskStartScheduler+0xb0>)
 8003f2c:	4820      	ldr	r0, [pc, #128]	; (8003fb0 <vTaskStartScheduler+0xb4>)
 8003f2e:	f7ff fe13 	bl	8003b58 <xTaskCreateStatic>
 8003f32:	4602      	mov	r2, r0
 8003f34:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <vTaskStartScheduler+0xb8>)
 8003f36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <vTaskStartScheduler+0xb8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f40:	2301      	movs	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e001      	b.n	8003f4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d102      	bne.n	8003f56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f50:	f000 fce8 	bl	8004924 <xTimerCreateTimerTask>
 8003f54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d115      	bne.n	8003f88 <vTaskStartScheduler+0x8c>
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <vTaskStartScheduler+0xbc>)
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <vTaskStartScheduler+0xc0>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <vTaskStartScheduler+0xc4>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f82:	f7fe ff5d 	bl	8002e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f86:	e00d      	b.n	8003fa4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8e:	d109      	bne.n	8003fa4 <vTaskStartScheduler+0xa8>
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e7fe      	b.n	8003fa2 <vTaskStartScheduler+0xa6>
}
 8003fa4:	bf00      	nop
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	0800505c 	.word	0x0800505c
 8003fb0:	080045c5 	.word	0x080045c5
 8003fb4:	20004804 	.word	0x20004804
 8003fb8:	20004800 	.word	0x20004800
 8003fbc:	200047ec 	.word	0x200047ec
 8003fc0:	200047e4 	.word	0x200047e4

08003fc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <vTaskSuspendAll+0x18>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	4a03      	ldr	r2, [pc, #12]	; (8003fdc <vTaskSuspendAll+0x18>)
 8003fd0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	20004808 	.word	0x20004808

08003fe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <xTaskResumeAll+0x114>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <xTaskResumeAll+0x2a>
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	e7fe      	b.n	8004008 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800400a:	f7fe ffb7 	bl	8002f7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800400e:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <xTaskResumeAll+0x114>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <xTaskResumeAll+0x114>)
 8004016:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004018:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <xTaskResumeAll+0x114>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d162      	bne.n	80040e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <xTaskResumeAll+0x118>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05e      	beq.n	80040e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004028:	e02f      	b.n	800408a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402a:	4b34      	ldr	r3, [pc, #208]	; (80040fc <xTaskResumeAll+0x11c>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3318      	adds	r3, #24
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fe52 	bl	8002ce0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3304      	adds	r3, #4
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe fe4d 	bl	8002ce0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <xTaskResumeAll+0x120>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d903      	bls.n	800405a <xTaskResumeAll+0x7a>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <xTaskResumeAll+0x120>)
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4a27      	ldr	r2, [pc, #156]	; (8004104 <xTaskResumeAll+0x124>)
 8004068:	441a      	add	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f7fe fdd8 	bl	8002c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	4b23      	ldr	r3, [pc, #140]	; (8004108 <xTaskResumeAll+0x128>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004084:	4b21      	ldr	r3, [pc, #132]	; (800410c <xTaskResumeAll+0x12c>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <xTaskResumeAll+0x11c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1cb      	bne.n	800402a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004098:	f000 fb46 	bl	8004728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800409c:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <xTaskResumeAll+0x130>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040a8:	f000 f846 	bl	8004138 <xTaskIncrementTick>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040b2:	4b16      	ldr	r3, [pc, #88]	; (800410c <xTaskResumeAll+0x12c>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f1      	bne.n	80040a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <xTaskResumeAll+0x130>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <xTaskResumeAll+0x12c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <xTaskResumeAll+0x134>)
 80040d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040e6:	f7fe ff77 	bl	8002fd8 <vPortExitCritical>

	return xAlreadyYielded;
 80040ea:	68bb      	ldr	r3, [r7, #8]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20004808 	.word	0x20004808
 80040f8:	200047e0 	.word	0x200047e0
 80040fc:	200047a0 	.word	0x200047a0
 8004100:	200047e8 	.word	0x200047e8
 8004104:	20004310 	.word	0x20004310
 8004108:	2000430c 	.word	0x2000430c
 800410c:	200047f4 	.word	0x200047f4
 8004110:	200047f0 	.word	0x200047f0
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <xTaskGetTickCount+0x1c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004124:	687b      	ldr	r3, [r7, #4]
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	200047e4 	.word	0x200047e4

08004138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004142:	4b4e      	ldr	r3, [pc, #312]	; (800427c <xTaskIncrementTick+0x144>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 8088 	bne.w	800425c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800414c:	4b4c      	ldr	r3, [pc, #304]	; (8004280 <xTaskIncrementTick+0x148>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004154:	4a4a      	ldr	r2, [pc, #296]	; (8004280 <xTaskIncrementTick+0x148>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11f      	bne.n	80041a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004160:	4b48      	ldr	r3, [pc, #288]	; (8004284 <xTaskIncrementTick+0x14c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <xTaskIncrementTick+0x46>
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	e7fe      	b.n	800417c <xTaskIncrementTick+0x44>
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <xTaskIncrementTick+0x14c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	4b40      	ldr	r3, [pc, #256]	; (8004288 <xTaskIncrementTick+0x150>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a3e      	ldr	r2, [pc, #248]	; (8004284 <xTaskIncrementTick+0x14c>)
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4a3e      	ldr	r2, [pc, #248]	; (8004288 <xTaskIncrementTick+0x150>)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b3e      	ldr	r3, [pc, #248]	; (800428c <xTaskIncrementTick+0x154>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	4a3c      	ldr	r2, [pc, #240]	; (800428c <xTaskIncrementTick+0x154>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	f000 fac4 	bl	8004728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041a0:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <xTaskIncrementTick+0x158>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d349      	bcc.n	800423e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <xTaskIncrementTick+0x14c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b4:	4b36      	ldr	r3, [pc, #216]	; (8004290 <xTaskIncrementTick+0x158>)
 80041b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ba:	601a      	str	r2, [r3, #0]
					break;
 80041bc:	e03f      	b.n	800423e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <xTaskIncrementTick+0x14c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d203      	bcs.n	80041de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041d6:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <xTaskIncrementTick+0x158>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041dc:	e02f      	b.n	800423e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fd7c 	bl	8002ce0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	3318      	adds	r3, #24
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fd73 	bl	8002ce0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <xTaskIncrementTick+0x15c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d903      	bls.n	800420e <xTaskIncrementTick+0xd6>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	4a22      	ldr	r2, [pc, #136]	; (8004294 <xTaskIncrementTick+0x15c>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <xTaskIncrementTick+0x160>)
 800421c:	441a      	add	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe fcfe 	bl	8002c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <xTaskIncrementTick+0x164>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	429a      	cmp	r2, r3
 8004236:	d3b8      	bcc.n	80041aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800423c:	e7b5      	b.n	80041aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <xTaskIncrementTick+0x164>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	4914      	ldr	r1, [pc, #80]	; (8004298 <xTaskIncrementTick+0x160>)
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d907      	bls.n	8004266 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e004      	b.n	8004266 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <xTaskIncrementTick+0x168>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <xTaskIncrementTick+0x168>)
 8004264:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <xTaskIncrementTick+0x16c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004272:	697b      	ldr	r3, [r7, #20]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20004808 	.word	0x20004808
 8004280:	200047e4 	.word	0x200047e4
 8004284:	20004798 	.word	0x20004798
 8004288:	2000479c 	.word	0x2000479c
 800428c:	200047f8 	.word	0x200047f8
 8004290:	20004800 	.word	0x20004800
 8004294:	200047e8 	.word	0x200047e8
 8004298:	20004310 	.word	0x20004310
 800429c:	2000430c 	.word	0x2000430c
 80042a0:	200047f0 	.word	0x200047f0
 80042a4:	200047f4 	.word	0x200047f4

080042a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ae:	4b27      	ldr	r3, [pc, #156]	; (800434c <vTaskSwitchContext+0xa4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <vTaskSwitchContext+0xa8>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042bc:	e040      	b.n	8004340 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <vTaskSwitchContext+0xa8>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c4:	4b23      	ldr	r3, [pc, #140]	; (8004354 <vTaskSwitchContext+0xac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e00f      	b.n	80042ec <vTaskSwitchContext+0x44>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <vTaskSwitchContext+0x3e>
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e7fe      	b.n	80042e4 <vTaskSwitchContext+0x3c>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	491a      	ldr	r1, [pc, #104]	; (8004358 <vTaskSwitchContext+0xb0>)
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0e5      	beq.n	80042cc <vTaskSwitchContext+0x24>
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a13      	ldr	r2, [pc, #76]	; (8004358 <vTaskSwitchContext+0xb0>)
 800430c:	4413      	add	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3308      	adds	r3, #8
 8004322:	429a      	cmp	r2, r3
 8004324:	d104      	bne.n	8004330 <vTaskSwitchContext+0x88>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <vTaskSwitchContext+0xb4>)
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4a06      	ldr	r2, [pc, #24]	; (8004354 <vTaskSwitchContext+0xac>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6013      	str	r3, [r2, #0]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	20004808 	.word	0x20004808
 8004350:	200047f4 	.word	0x200047f4
 8004354:	200047e8 	.word	0x200047e8
 8004358:	20004310 	.word	0x20004310
 800435c:	2000430c 	.word	0x2000430c

08004360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <vTaskPlaceOnEventList+0x24>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e7fe      	b.n	8004382 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <vTaskPlaceOnEventList+0x44>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3318      	adds	r3, #24
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fe fc6e 	bl	8002c6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004392:	2101      	movs	r1, #1
 8004394:	6838      	ldr	r0, [r7, #0]
 8004396:	f000 fa71 	bl	800487c <prvAddCurrentTaskToDelayedList>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000430c 	.word	0x2000430c

080043a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <vTaskPlaceOnEventListRestricted+0x26>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e7fe      	b.n	80043cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <vTaskPlaceOnEventListRestricted+0x50>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3318      	adds	r3, #24
 80043d4:	4619      	mov	r1, r3
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7fe fc25 	bl	8002c26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	68b8      	ldr	r0, [r7, #8]
 80043ec:	f000 fa46 	bl	800487c <prvAddCurrentTaskToDelayedList>
	}
 80043f0:	bf00      	nop
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000430c 	.word	0x2000430c

080043fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <xTaskRemoveFromEventList+0x2a>
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e7fe      	b.n	8004424 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3318      	adds	r3, #24
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fc58 	bl	8002ce0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <xTaskRemoveFromEventList+0xac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11d      	bne.n	8004474 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe fc4f 	bl	8002ce0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <xTaskRemoveFromEventList+0xb0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d903      	bls.n	8004456 <xTaskRemoveFromEventList+0x5a>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <xTaskRemoveFromEventList+0xb0>)
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <xTaskRemoveFromEventList+0xb4>)
 8004464:	441a      	add	r2, r3
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f7fe fbda 	bl	8002c26 <vListInsertEnd>
 8004472:	e005      	b.n	8004480 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	3318      	adds	r3, #24
 8004478:	4619      	mov	r1, r3
 800447a:	480e      	ldr	r0, [pc, #56]	; (80044b4 <xTaskRemoveFromEventList+0xb8>)
 800447c:	f7fe fbd3 	bl	8002c26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <xTaskRemoveFromEventList+0xbc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	429a      	cmp	r2, r3
 800448c:	d905      	bls.n	800449a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800448e:	2301      	movs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <xTaskRemoveFromEventList+0xc0>)
 8004494:	2201      	movs	r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e001      	b.n	800449e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800449e:	697b      	ldr	r3, [r7, #20]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20004808 	.word	0x20004808
 80044ac:	200047e8 	.word	0x200047e8
 80044b0:	20004310 	.word	0x20004310
 80044b4:	200047a0 	.word	0x200047a0
 80044b8:	2000430c 	.word	0x2000430c
 80044bc:	200047f4 	.word	0x200047f4

080044c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <vTaskInternalSetTimeOutState+0x24>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <vTaskInternalSetTimeOutState+0x28>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	605a      	str	r2, [r3, #4]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	200047f8 	.word	0x200047f8
 80044e8:	200047e4 	.word	0x200047e4

080044ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <xTaskCheckForTimeOut+0x24>
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e7fe      	b.n	800450e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <xTaskCheckForTimeOut+0x3e>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e7fe      	b.n	8004528 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800452a:	f7fe fd27 	bl	8002f7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <xTaskCheckForTimeOut+0xb8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004546:	d102      	bne.n	800454e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	e023      	b.n	8004596 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <xTaskCheckForTimeOut+0xbc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d007      	beq.n	800456a <xTaskCheckForTimeOut+0x7e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	429a      	cmp	r2, r3
 8004562:	d302      	bcc.n	800456a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004564:	2301      	movs	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	e015      	b.n	8004596 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d20b      	bcs.n	800458c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff9d 	bl	80044c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	e004      	b.n	8004596 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004592:	2301      	movs	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004596:	f7fe fd1f 	bl	8002fd8 <vPortExitCritical>

	return xReturn;
 800459a:	69fb      	ldr	r3, [r7, #28]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	200047e4 	.word	0x200047e4
 80045a8:	200047f8 	.word	0x200047f8

080045ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <vTaskMissedYield+0x14>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	200047f4 	.word	0x200047f4

080045c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045cc:	f000 f852 	bl	8004674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <prvIdleTask+0x28>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d9f9      	bls.n	80045cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <prvIdleTask+0x2c>)
 80045da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045e8:	e7f0      	b.n	80045cc <prvIdleTask+0x8>
 80045ea:	bf00      	nop
 80045ec:	20004310 	.word	0x20004310
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	e00c      	b.n	800461a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <prvInitialiseTaskLists+0x60>)
 800460c:	4413      	add	r3, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe fadc 	bl	8002bcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3301      	adds	r3, #1
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b37      	cmp	r3, #55	; 0x37
 800461e:	d9ef      	bls.n	8004600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004620:	480d      	ldr	r0, [pc, #52]	; (8004658 <prvInitialiseTaskLists+0x64>)
 8004622:	f7fe fad3 	bl	8002bcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004626:	480d      	ldr	r0, [pc, #52]	; (800465c <prvInitialiseTaskLists+0x68>)
 8004628:	f7fe fad0 	bl	8002bcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800462c:	480c      	ldr	r0, [pc, #48]	; (8004660 <prvInitialiseTaskLists+0x6c>)
 800462e:	f7fe facd 	bl	8002bcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004632:	480c      	ldr	r0, [pc, #48]	; (8004664 <prvInitialiseTaskLists+0x70>)
 8004634:	f7fe faca 	bl	8002bcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004638:	480b      	ldr	r0, [pc, #44]	; (8004668 <prvInitialiseTaskLists+0x74>)
 800463a:	f7fe fac7 	bl	8002bcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <prvInitialiseTaskLists+0x78>)
 8004640:	4a05      	ldr	r2, [pc, #20]	; (8004658 <prvInitialiseTaskLists+0x64>)
 8004642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <prvInitialiseTaskLists+0x7c>)
 8004646:	4a05      	ldr	r2, [pc, #20]	; (800465c <prvInitialiseTaskLists+0x68>)
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20004310 	.word	0x20004310
 8004658:	20004770 	.word	0x20004770
 800465c:	20004784 	.word	0x20004784
 8004660:	200047a0 	.word	0x200047a0
 8004664:	200047b4 	.word	0x200047b4
 8004668:	200047cc 	.word	0x200047cc
 800466c:	20004798 	.word	0x20004798
 8004670:	2000479c 	.word	0x2000479c

08004674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800467a:	e019      	b.n	80046b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800467c:	f7fe fc7e 	bl	8002f7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <prvCheckTasksWaitingTermination+0x4c>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fb27 	bl	8002ce0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <prvCheckTasksWaitingTermination+0x50>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3b01      	subs	r3, #1
 8004698:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <prvCheckTasksWaitingTermination+0x50>)
 800469a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <prvCheckTasksWaitingTermination+0x54>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <prvCheckTasksWaitingTermination+0x54>)
 80046a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046a6:	f7fe fc97 	bl	8002fd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f80e 	bl	80046cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <prvCheckTasksWaitingTermination+0x54>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e1      	bne.n	800467c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	200047b4 	.word	0x200047b4
 80046c4:	200047e0 	.word	0x200047e0
 80046c8:	200047c8 	.word	0x200047c8

080046cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe f95e 	bl	80029a4 <vPortFree>
				vPortFree( pxTCB );
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7fe f95b 	bl	80029a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046ee:	e017      	b.n	8004720 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d103      	bne.n	8004702 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fe f952 	bl	80029a4 <vPortFree>
	}
 8004700:	e00e      	b.n	8004720 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004708:	2b02      	cmp	r3, #2
 800470a:	d009      	beq.n	8004720 <prvDeleteTCB+0x54>
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e7fe      	b.n	800471e <prvDeleteTCB+0x52>
	}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <prvResetNextTaskUnblockTime+0x38>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d104      	bne.n	8004742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004738:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <prvResetNextTaskUnblockTime+0x3c>)
 800473a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800473e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004740:	e008      	b.n	8004754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <prvResetNextTaskUnblockTime+0x38>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a04      	ldr	r2, [pc, #16]	; (8004764 <prvResetNextTaskUnblockTime+0x3c>)
 8004752:	6013      	str	r3, [r2, #0]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	20004798 	.word	0x20004798
 8004764:	20004800 	.word	0x20004800

08004768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800476e:	4b0b      	ldr	r3, [pc, #44]	; (800479c <xTaskGetSchedulerState+0x34>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004776:	2301      	movs	r3, #1
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	e008      	b.n	800478e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477c:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <xTaskGetSchedulerState+0x38>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004784:	2302      	movs	r3, #2
 8004786:	607b      	str	r3, [r7, #4]
 8004788:	e001      	b.n	800478e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800478a:	2300      	movs	r3, #0
 800478c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800478e:	687b      	ldr	r3, [r7, #4]
	}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	200047ec 	.word	0x200047ec
 80047a0:	20004808 	.word	0x20004808

080047a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d054      	beq.n	8004864 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <xTaskPriorityDisinherit+0xcc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d009      	beq.n	80047d8 <xTaskPriorityDisinherit+0x34>
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e7fe      	b.n	80047d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <xTaskPriorityDisinherit+0x50>
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	e7fe      	b.n	80047f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f8:	1e5a      	subs	r2, r3, #1
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	429a      	cmp	r2, r3
 8004808:	d02c      	beq.n	8004864 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480e:	2b00      	cmp	r3, #0
 8004810:	d128      	bne.n	8004864 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	3304      	adds	r3, #4
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fa62 	bl	8002ce0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <xTaskPriorityDisinherit+0xd0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d903      	bls.n	8004844 <xTaskPriorityDisinherit+0xa0>
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <xTaskPriorityDisinherit+0xd0>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4a09      	ldr	r2, [pc, #36]	; (8004878 <xTaskPriorityDisinherit+0xd4>)
 8004852:	441a      	add	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7fe f9e3 	bl	8002c26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004860:	2301      	movs	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004864:	697b      	ldr	r3, [r7, #20]
	}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	2000430c 	.word	0x2000430c
 8004874:	200047e8 	.word	0x200047e8
 8004878:	20004310 	.word	0x20004310

0800487c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004886:	4b21      	ldr	r3, [pc, #132]	; (800490c <prvAddCurrentTaskToDelayedList+0x90>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800488c:	4b20      	ldr	r3, [pc, #128]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3304      	adds	r3, #4
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fa24 	bl	8002ce0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800489e:	d10a      	bne.n	80048b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a6:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4819      	ldr	r0, [pc, #100]	; (8004914 <prvAddCurrentTaskToDelayedList+0x98>)
 80048b0:	f7fe f9b9 	bl	8002c26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048b4:	e026      	b.n	8004904 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4413      	add	r3, r2
 80048bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d209      	bcs.n	80048e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <prvAddCurrentTaskToDelayedList+0x9c>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f7fe f9c7 	bl	8002c6e <vListInsert>
}
 80048e0:	e010      	b.n	8004904 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <prvAddCurrentTaskToDelayedList+0xa0>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f7fe f9bd 	bl	8002c6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d202      	bcs.n	8004904 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6013      	str	r3, [r2, #0]
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200047e4 	.word	0x200047e4
 8004910:	2000430c 	.word	0x2000430c
 8004914:	200047cc 	.word	0x200047cc
 8004918:	2000479c 	.word	0x2000479c
 800491c:	20004798 	.word	0x20004798
 8004920:	20004800 	.word	0x20004800

08004924 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800492e:	f000 faff 	bl	8004f30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <xTimerCreateTimerTask+0x80>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d021      	beq.n	800497e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004942:	1d3a      	adds	r2, r7, #4
 8004944:	f107 0108 	add.w	r1, r7, #8
 8004948:	f107 030c 	add.w	r3, r7, #12
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd ff4d 	bl	80027ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	9202      	str	r2, [sp, #8]
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2302      	movs	r3, #2
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	460a      	mov	r2, r1
 8004964:	4910      	ldr	r1, [pc, #64]	; (80049a8 <xTimerCreateTimerTask+0x84>)
 8004966:	4811      	ldr	r0, [pc, #68]	; (80049ac <xTimerCreateTimerTask+0x88>)
 8004968:	f7ff f8f6 	bl	8003b58 <xTaskCreateStatic>
 800496c:	4602      	mov	r2, r0
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <xTimerCreateTimerTask+0x8c>)
 8004970:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <xTimerCreateTimerTask+0x8c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800497a:	2301      	movs	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <xTimerCreateTimerTask+0x74>
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e7fe      	b.n	8004996 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004998:	697b      	ldr	r3, [r7, #20]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	2000483c 	.word	0x2000483c
 80049a8:	08005064 	.word	0x08005064
 80049ac:	08004ae5 	.word	0x08004ae5
 80049b0:	20004840 	.word	0x20004840

080049b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <xTimerGenericCommand+0x2c>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	623b      	str	r3, [r7, #32]
 80049de:	e7fe      	b.n	80049de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049e0:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <xTimerGenericCommand+0x94>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02a      	beq.n	8004a3e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	dc18      	bgt.n	8004a2c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049fa:	f7ff feb5 	bl	8004768 <xTaskGetSchedulerState>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d109      	bne.n	8004a18 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <xTimerGenericCommand+0x94>)
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	f107 0110 	add.w	r1, r7, #16
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a10:	f7fe fccc 	bl	80033ac <xQueueGenericSend>
 8004a14:	6278      	str	r0, [r7, #36]	; 0x24
 8004a16:	e012      	b.n	8004a3e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <xTimerGenericCommand+0x94>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	f107 0110 	add.w	r1, r7, #16
 8004a20:	2300      	movs	r3, #0
 8004a22:	2200      	movs	r2, #0
 8004a24:	f7fe fcc2 	bl	80033ac <xQueueGenericSend>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24
 8004a2a:	e008      	b.n	8004a3e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <xTimerGenericCommand+0x94>)
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	f107 0110 	add.w	r1, r7, #16
 8004a34:	2300      	movs	r3, #0
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	f7fe fdb2 	bl	80035a0 <xQueueGenericSendFromISR>
 8004a3c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	2000483c 	.word	0x2000483c

08004a4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a56:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <prvProcessExpiredTimer+0x94>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe f93b 	bl	8002ce0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d021      	beq.n	8004abc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	18d1      	adds	r1, r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	6978      	ldr	r0, [r7, #20]
 8004a86:	f000 f8d1 	bl	8004c2c <prvInsertTimerInActiveList>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01e      	beq.n	8004ace <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a90:	2300      	movs	r3, #0
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2300      	movs	r3, #0
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	2100      	movs	r1, #0
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f7ff ff8a 	bl	80049b4 <xTimerGenericCommand>
 8004aa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d112      	bne.n	8004ace <prvProcessExpiredTimer+0x82>
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e7fe      	b.n	8004aba <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	6978      	ldr	r0, [r7, #20]
 8004ad4:	4798      	blx	r3
}
 8004ad6:	bf00      	nop
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20004834 	.word	0x20004834

08004ae4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aec:	f107 0308 	add.w	r3, r7, #8
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f857 	bl	8004ba4 <prvGetNextExpireTime>
 8004af6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4619      	mov	r1, r3
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f803 	bl	8004b08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b02:	f000 f8d5 	bl	8004cb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b06:	e7f1      	b.n	8004aec <prvTimerTask+0x8>

08004b08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b12:	f7ff fa57 	bl	8003fc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f866 	bl	8004bec <prvSampleTimeNow>
 8004b20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d130      	bne.n	8004b8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <prvProcessTimerOrBlockTask+0x3c>
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d806      	bhi.n	8004b44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b36:	f7ff fa53 	bl	8003fe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ff85 	bl	8004a4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b42:	e024      	b.n	8004b8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <prvProcessTimerOrBlockTask+0x90>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <prvProcessTimerOrBlockTask+0x50>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <prvProcessTimerOrBlockTask+0x52>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <prvProcessTimerOrBlockTask+0x94>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f7fe ffc1 	bl	8003af0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b6e:	f7ff fa37 	bl	8003fe0 <xTaskResumeAll>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <prvProcessTimerOrBlockTask+0x98>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
}
 8004b88:	e001      	b.n	8004b8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b8a:	f7ff fa29 	bl	8003fe0 <xTaskResumeAll>
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20004838 	.word	0x20004838
 8004b9c:	2000483c 	.word	0x2000483c
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bac:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <prvGetNextExpireTime+0x44>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <prvGetNextExpireTime+0x16>
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	e000      	b.n	8004bbc <prvGetNextExpireTime+0x18>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <prvGetNextExpireTime+0x44>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e001      	b.n	8004bd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20004834 	.word	0x20004834

08004bec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bf4:	f7ff fa90 	bl	8004118 <xTaskGetTickCount>
 8004bf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <prvSampleTimeNow+0x3c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d205      	bcs.n	8004c10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c04:	f000 f930 	bl	8004e68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e002      	b.n	8004c16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c16:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <prvSampleTimeNow+0x3c>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20004844 	.word	0x20004844

08004c2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d812      	bhi.n	8004c78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d302      	bcc.n	8004c66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e01b      	b.n	8004c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c66:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <prvInsertTimerInActiveList+0x7c>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f7fd fffc 	bl	8002c6e <vListInsert>
 8004c76:	e012      	b.n	8004c9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d206      	bcs.n	8004c8e <prvInsertTimerInActiveList+0x62>
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e007      	b.n	8004c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <prvInsertTimerInActiveList+0x80>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fd ffe8 	bl	8002c6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c9e:	697b      	ldr	r3, [r7, #20]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20004838 	.word	0x20004838
 8004cac:	20004834 	.word	0x20004834

08004cb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	; 0x38
 8004cb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cb6:	e0c6      	b.n	8004e46 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da17      	bge.n	8004cee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004cbe:	1d3b      	adds	r3, r7, #4
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <prvProcessReceivedCommands+0x2e>
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e7fe      	b.n	8004cdc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce4:	6850      	ldr	r0, [r2, #4]
 8004ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce8:	6892      	ldr	r2, [r2, #8]
 8004cea:	4611      	mov	r1, r2
 8004cec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f2c0 80a7 	blt.w	8004e44 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fd ffea 	bl	8002ce0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ff6c 	bl	8004bec <prvSampleTimeNow>
 8004d14:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b09      	cmp	r3, #9
 8004d1a:	f200 8094 	bhi.w	8004e46 <prvProcessReceivedCommands+0x196>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <prvProcessReceivedCommands+0x74>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d4d 	.word	0x08004d4d
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d4d 	.word	0x08004d4d
 8004d30:	08004dbf 	.word	0x08004dbf
 8004d34:	08004dd3 	.word	0x08004dd3
 8004d38:	08004e1b 	.word	0x08004e1b
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d4d 	.word	0x08004d4d
 8004d44:	08004dbf 	.word	0x08004dbf
 8004d48:	08004dd3 	.word	0x08004dd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	18d1      	adds	r1, r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d6c:	f7ff ff5e 	bl	8004c2c <prvInsertTimerInActiveList>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d067      	beq.n	8004e46 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d05c      	beq.n	8004e46 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	441a      	add	r2, r3
 8004d94:	2300      	movs	r3, #0
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d9e:	f7ff fe09 	bl	80049b4 <xTimerGenericCommand>
 8004da2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d14d      	bne.n	8004e46 <prvProcessReceivedCommands+0x196>
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e7fe      	b.n	8004dbc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004dd0:	e039      	b.n	8004e46 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <prvProcessReceivedCommands+0x156>
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e7fe      	b.n	8004e04 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	18d1      	adds	r1, r2, r3
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e14:	f7ff ff0a 	bl	8004c2c <prvInsertTimerInActiveList>
					break;
 8004e18:	e015      	b.n	8004e46 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e2a:	f7fd fdbb 	bl	80029a4 <vPortFree>
 8004e2e:	e00a      	b.n	8004e46 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e42:	e000      	b.n	8004e46 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e46:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <prvProcessReceivedCommands+0x1b4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1d39      	adds	r1, r7, #4
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fc3a 	bl	80036c8 <xQueueReceive>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f47f af2e 	bne.w	8004cb8 <prvProcessReceivedCommands+0x8>
	}
}
 8004e5c:	bf00      	nop
 8004e5e:	3730      	adds	r7, #48	; 0x30
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	2000483c 	.word	0x2000483c

08004e68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e6e:	e047      	b.n	8004f00 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e70:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <prvSwitchTimerLists+0xc0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <prvSwitchTimerLists+0xc0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fd ff29 	bl	8002ce0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d02d      	beq.n	8004f00 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d90e      	bls.n	8004ed4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <prvSwitchTimerLists+0xc0>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7fd fece 	bl	8002c6e <vListInsert>
 8004ed2:	e015      	b.n	8004f00 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	2100      	movs	r1, #0
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff fd68 	bl	80049b4 <xTimerGenericCommand>
 8004ee4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d109      	bne.n	8004f00 <prvSwitchTimerLists+0x98>
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	e7fe      	b.n	8004efe <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <prvSwitchTimerLists+0xc0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1b2      	bne.n	8004e70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <prvSwitchTimerLists+0xc0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f10:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <prvSwitchTimerLists+0xc4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a04      	ldr	r2, [pc, #16]	; (8004f28 <prvSwitchTimerLists+0xc0>)
 8004f16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f18:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <prvSwitchTimerLists+0xc4>)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6013      	str	r3, [r2, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20004834 	.word	0x20004834
 8004f2c:	20004838 	.word	0x20004838

08004f30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f36:	f7fe f821 	bl	8002f7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f3a:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <prvCheckForValidListAndQueue+0x60>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d120      	bne.n	8004f84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f42:	4814      	ldr	r0, [pc, #80]	; (8004f94 <prvCheckForValidListAndQueue+0x64>)
 8004f44:	f7fd fe42 	bl	8002bcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f48:	4813      	ldr	r0, [pc, #76]	; (8004f98 <prvCheckForValidListAndQueue+0x68>)
 8004f4a:	f7fd fe3f 	bl	8002bcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <prvCheckForValidListAndQueue+0x6c>)
 8004f50:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <prvCheckForValidListAndQueue+0x64>)
 8004f52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f54:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <prvCheckForValidListAndQueue+0x70>)
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <prvCheckForValidListAndQueue+0x68>)
 8004f58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <prvCheckForValidListAndQueue+0x74>)
 8004f60:	4a11      	ldr	r2, [pc, #68]	; (8004fa8 <prvCheckForValidListAndQueue+0x78>)
 8004f62:	2110      	movs	r1, #16
 8004f64:	200a      	movs	r0, #10
 8004f66:	f7fe f98b 	bl	8003280 <xQueueGenericCreateStatic>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <prvCheckForValidListAndQueue+0x60>)
 8004f6e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <prvCheckForValidListAndQueue+0x60>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <prvCheckForValidListAndQueue+0x60>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	490b      	ldr	r1, [pc, #44]	; (8004fac <prvCheckForValidListAndQueue+0x7c>)
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fd8e 	bl	8003aa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f84:	f7fe f828 	bl	8002fd8 <vPortExitCritical>
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000483c 	.word	0x2000483c
 8004f94:	2000480c 	.word	0x2000480c
 8004f98:	20004820 	.word	0x20004820
 8004f9c:	20004834 	.word	0x20004834
 8004fa0:	20004838 	.word	0x20004838
 8004fa4:	200048e8 	.word	0x200048e8
 8004fa8:	20004848 	.word	0x20004848
 8004fac:	0800506c 	.word	0x0800506c

08004fb0 <__libc_init_array>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4e0d      	ldr	r6, [pc, #52]	; (8004fe8 <__libc_init_array+0x38>)
 8004fb4:	4c0d      	ldr	r4, [pc, #52]	; (8004fec <__libc_init_array+0x3c>)
 8004fb6:	1ba4      	subs	r4, r4, r6
 8004fb8:	10a4      	asrs	r4, r4, #2
 8004fba:	2500      	movs	r5, #0
 8004fbc:	42a5      	cmp	r5, r4
 8004fbe:	d109      	bne.n	8004fd4 <__libc_init_array+0x24>
 8004fc0:	4e0b      	ldr	r6, [pc, #44]	; (8004ff0 <__libc_init_array+0x40>)
 8004fc2:	4c0c      	ldr	r4, [pc, #48]	; (8004ff4 <__libc_init_array+0x44>)
 8004fc4:	f000 f82c 	bl	8005020 <_init>
 8004fc8:	1ba4      	subs	r4, r4, r6
 8004fca:	10a4      	asrs	r4, r4, #2
 8004fcc:	2500      	movs	r5, #0
 8004fce:	42a5      	cmp	r5, r4
 8004fd0:	d105      	bne.n	8004fde <__libc_init_array+0x2e>
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fd8:	4798      	blx	r3
 8004fda:	3501      	adds	r5, #1
 8004fdc:	e7ee      	b.n	8004fbc <__libc_init_array+0xc>
 8004fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe2:	4798      	blx	r3
 8004fe4:	3501      	adds	r5, #1
 8004fe6:	e7f2      	b.n	8004fce <__libc_init_array+0x1e>
 8004fe8:	080050f0 	.word	0x080050f0
 8004fec:	080050f0 	.word	0x080050f0
 8004ff0:	080050f0 	.word	0x080050f0
 8004ff4:	080050f4 	.word	0x080050f4

08004ff8 <memcpy>:
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	1e43      	subs	r3, r0, #1
 8004ffc:	440a      	add	r2, r1
 8004ffe:	4291      	cmp	r1, r2
 8005000:	d100      	bne.n	8005004 <memcpy+0xc>
 8005002:	bd10      	pop	{r4, pc}
 8005004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800500c:	e7f7      	b.n	8004ffe <memcpy+0x6>

0800500e <memset>:
 800500e:	4402      	add	r2, r0
 8005010:	4603      	mov	r3, r0
 8005012:	4293      	cmp	r3, r2
 8005014:	d100      	bne.n	8005018 <memset+0xa>
 8005016:	4770      	bx	lr
 8005018:	f803 1b01 	strb.w	r1, [r3], #1
 800501c:	e7f9      	b.n	8005012 <memset+0x4>
	...

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr
